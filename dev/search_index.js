var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Raylib","category":"page"},{"location":"#Raylib","page":"Home","title":"Raylib","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Raylib.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Raylib]","category":"page"},{"location":"#Raylib.BEIGE","page":"Home","title":"Raylib.BEIGE","text":"raylib defined Beige\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.BLACK","page":"Home","title":"Raylib.BLACK","text":"raylib defined Black\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.BLANK","page":"Home","title":"Raylib.BLANK","text":"raylib defined Transparent\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.BLUE","page":"Home","title":"Raylib.BLUE","text":"raylib defined Blue\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.BROWN","page":"Home","title":"Raylib.BROWN","text":"raylib defined Brown\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.DARKBLUE","page":"Home","title":"Raylib.DARKBLUE","text":"raylib defined Dark Blue\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.DARKBROWN","page":"Home","title":"Raylib.DARKBROWN","text":"raylib defined Dark Brown\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.DARKGRAY","page":"Home","title":"Raylib.DARKGRAY","text":"raylib defined Dark Gray\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.DARKGREEN","page":"Home","title":"Raylib.DARKGREEN","text":"raylib defined Dark Green\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.DARKPURPLE","page":"Home","title":"Raylib.DARKPURPLE","text":"raylib defined Dark Purple\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.GOLD","page":"Home","title":"Raylib.GOLD","text":"raylib defined Gold\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.GRAY","page":"Home","title":"Raylib.GRAY","text":"raylib defined Gray\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.GREEN","page":"Home","title":"Raylib.GREEN","text":"raylib defined Green\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.LIGHTGRAY","page":"Home","title":"Raylib.LIGHTGRAY","text":"raylib defined Light Gray\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.LIME","page":"Home","title":"Raylib.LIME","text":"raylib defined Lime\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.MAGENTA","page":"Home","title":"Raylib.MAGENTA","text":"raylib defined Magenta\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.MAROON","page":"Home","title":"Raylib.MAROON","text":"raylib defined Maroon\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.ORANGE","page":"Home","title":"Raylib.ORANGE","text":"raylib defined Orange\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.PINK","page":"Home","title":"Raylib.PINK","text":"raylib defined Pink\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.PURPLE","page":"Home","title":"Raylib.PURPLE","text":"raylib defined Purple\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.RAYWHITE","page":"Home","title":"Raylib.RAYWHITE","text":"raylib defined Ray White\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.RED","page":"Home","title":"Raylib.RED","text":"raylib defined Red\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.SKYBLUE","page":"Home","title":"Raylib.SKYBLUE","text":"raylib defined Sky Blue\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.VIOLET","page":"Home","title":"Raylib.VIOLET","text":"raylib defined Violet\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.WHITE","page":"Home","title":"Raylib.WHITE","text":"raylib defined White\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.YELLOW","page":"Home","title":"Raylib.YELLOW","text":"raylib defined Yellow\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.typemap_dict","page":"Home","title":"Raylib.typemap_dict","text":"type string => (c return type, c argument type, julia argument type [, julia return type])\n\n\n\n\n\n","category":"constant"},{"location":"#Raylib.BeginBlendMode-Tuple{Integer}","page":"Home","title":"Raylib.BeginBlendMode","text":"BeginBlendMode(mode::Integer)\nlibraylib.BeginBlendMode(mode::Cint)::Cvoid\n\nBegin blending mode (alpha, additive, multiplied, subtract, custom)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.BeginDrawing-Tuple{}","page":"Home","title":"Raylib.BeginDrawing","text":"BeginDrawing()\nlibraylib.BeginDrawing()::Cvoid\n\nSetup canvas (framebuffer) to start drawing\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.BeginMode2D-Tuple{Raylib.RayCamera2D}","page":"Home","title":"Raylib.BeginMode2D","text":"BeginMode2D(camera::RayCamera2D)\nlibraylib.BeginMode2D(camera::RayCamera2D)::Cvoid\n\nBegin 2D mode with custom camera (2D)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.BeginMode3D-Tuple{Raylib.RayCamera3D}","page":"Home","title":"Raylib.BeginMode3D","text":"BeginMode3D(camera::RayCamera3D)\nlibraylib.BeginMode3D(camera::RayCamera3D)::Cvoid\n\nBegin 3D mode with custom camera (3D)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.BeginScissorMode-NTuple{4, Integer}","page":"Home","title":"Raylib.BeginScissorMode","text":"BeginScissorMode(x::Integer, y::Integer, width::Integer, height::Integer)\nlibraylib.BeginScissorMode(x::Cint, y::Cint, width::Cint, height::Cint)::Cvoid\n\nBegin scissor mode (define screen area for following drawing)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.BeginShaderMode-Tuple{Raylib.RayShader}","page":"Home","title":"Raylib.BeginShaderMode","text":"BeginShaderMode(shader::RayShader)\nlibraylib.BeginShaderMode(shader::RayShader)::Cvoid\n\nBegin custom shader drawing\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.BeginTextureMode-Tuple{Raylib.RayRenderTexture}","page":"Home","title":"Raylib.BeginTextureMode","text":"BeginTextureMode(target::RayRenderTexture)\nlibraylib.BeginTextureMode(target::RayRenderTexture)::Cvoid\n\nBegin drawing to render texture\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.BeginVrStereoMode-Tuple{Raylib.RayVrStereoConfig}","page":"Home","title":"Raylib.BeginVrStereoMode","text":"BeginVrStereoMode(config::RayVrStereoConfig)\nlibraylib.BeginVrStereoMode(config::RayVrStereoConfig)::Cvoid\n\nBegin stereo rendering (requires VR simulator)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ChangeDirectory-Tuple{String}","page":"Home","title":"Raylib.ChangeDirectory","text":"ChangeDirectory(dir::String)::Bool\nlibraylib.ChangeDirectory(dir::Cstring)::Cuchar\n\nChange working directory, return true on success\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionBoxSphere-Tuple{Raylib.RayBoundingBox, Tuple{Float32, Float32, Float32}, Real}","page":"Home","title":"Raylib.CheckCollisionBoxSphere","text":"CheckCollisionBoxSphere(box::RayBoundingBox, center::RayVector3, radius::Real)::Bool\nlibraylib.CheckCollisionBoxSphere(box::RayBoundingBox, center::NTuple{3, Cfloat}, radius::Cfloat)::Cuchar\n\nCheck collision between box and sphere\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionBoxes-Tuple{Raylib.RayBoundingBox, Raylib.RayBoundingBox}","page":"Home","title":"Raylib.CheckCollisionBoxes","text":"CheckCollisionBoxes(box1::RayBoundingBox, box2::RayBoundingBox)::Bool\nlibraylib.CheckCollisionBoxes(box1::RayBoundingBox, box2::RayBoundingBox)::Cuchar\n\nCheck collision between two bounding boxes\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionCircleRec-Tuple{Tuple{Float32, Float32}, Real, Raylib.RayRectangle}","page":"Home","title":"Raylib.CheckCollisionCircleRec","text":"CheckCollisionCircleRec(center::RayVector2, radius::Real, rec::RayRectangle)::Bool\nlibraylib.CheckCollisionCircleRec(center::NTuple{2, Cfloat}, radius::Cfloat, rec::RayRectangle)::Cuchar\n\nCheck collision between circle and rectangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionCircles-Tuple{Tuple{Float32, Float32}, Real, Tuple{Float32, Float32}, Real}","page":"Home","title":"Raylib.CheckCollisionCircles","text":"CheckCollisionCircles(center1::RayVector2, radius1::Real, center2::RayVector2, radius2::Real)::Bool\nlibraylib.CheckCollisionCircles(center1::NTuple{2, Cfloat}, radius1::Cfloat, center2::NTuple{2, Cfloat}, radius2::Cfloat)::Cuchar\n\nCheck collision between two circles\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionLines-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Ref{Tuple{Float32, Float32}}}","page":"Home","title":"Raylib.CheckCollisionLines","text":"CheckCollisionLines(startPos1::RayVector2, endPos1::RayVector2, startPos2::RayVector2, endPos2::RayVector2, collisionPoint::Ref{RayVector2})::Bool\nlibraylib.CheckCollisionLines(startPos1::NTuple{2, Cfloat}, endPos1::NTuple{2, Cfloat}, startPos2::NTuple{2, Cfloat}, endPos2::NTuple{2, Cfloat}, collisionPoint::Ref{NTuple{2, Cfloat}})::Cuchar\n\nCheck the collision between two lines defined by two points each, returns collision point by reference\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionPointCircle-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Real}","page":"Home","title":"Raylib.CheckCollisionPointCircle","text":"CheckCollisionPointCircle(point::RayVector2, center::RayVector2, radius::Real)::Bool\nlibraylib.CheckCollisionPointCircle(point::NTuple{2, Cfloat}, center::NTuple{2, Cfloat}, radius::Cfloat)::Cuchar\n\nCheck if point is inside circle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionPointLine-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Integer}","page":"Home","title":"Raylib.CheckCollisionPointLine","text":"CheckCollisionPointLine(point::RayVector2, p1::RayVector2, p2::RayVector2, threshold::Integer)::Bool\nlibraylib.CheckCollisionPointLine(point::NTuple{2, Cfloat}, p1::NTuple{2, Cfloat}, p2::NTuple{2, Cfloat}, threshold::Cint)::Cuchar\n\nCheck if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionPointRec-Tuple{Tuple{Float32, Float32}, Raylib.RayRectangle}","page":"Home","title":"Raylib.CheckCollisionPointRec","text":"CheckCollisionPointRec(point::RayVector2, rec::RayRectangle)::Bool\nlibraylib.CheckCollisionPointRec(point::NTuple{2, Cfloat}, rec::RayRectangle)::Cuchar\n\nCheck if point is inside rectangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionPointTriangle-NTuple{4, Tuple{Float32, Float32}}","page":"Home","title":"Raylib.CheckCollisionPointTriangle","text":"CheckCollisionPointTriangle(point::RayVector2, p1::RayVector2, p2::RayVector2, p3::RayVector2)::Bool\nlibraylib.CheckCollisionPointTriangle(point::NTuple{2, Cfloat}, p1::NTuple{2, Cfloat}, p2::NTuple{2, Cfloat}, p3::NTuple{2, Cfloat})::Cuchar\n\nCheck if point is inside a triangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionRecs-Tuple{Raylib.RayRectangle, Raylib.RayRectangle}","page":"Home","title":"Raylib.CheckCollisionRecs","text":"CheckCollisionRecs(rec1::RayRectangle, rec2::RayRectangle)::Bool\nlibraylib.CheckCollisionRecs(rec1::RayRectangle, rec2::RayRectangle)::Cuchar\n\nCheck collision between two rectangles\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CheckCollisionSpheres-Tuple{Tuple{Float32, Float32, Float32}, Real, Tuple{Float32, Float32, Float32}, Real}","page":"Home","title":"Raylib.CheckCollisionSpheres","text":"CheckCollisionSpheres(center1::RayVector3, radius1::Real, center2::RayVector3, radius2::Real)::Bool\nlibraylib.CheckCollisionSpheres(center1::NTuple{3, Cfloat}, radius1::Cfloat, center2::NTuple{3, Cfloat}, radius2::Cfloat)::Cuchar\n\nCheck collision between two spheres\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ClearBackground-Tuple{ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ClearBackground","text":"ClearBackground(color::RayColor)\nlibraylib.ClearBackground(color::RayColor)::Cvoid\n\nSet background color (framebuffer clear color)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ClearDirectoryFiles-Tuple{}","page":"Home","title":"Raylib.ClearDirectoryFiles","text":"ClearDirectoryFiles()\nlibraylib.ClearDirectoryFiles()::Cvoid\n\nClear directory files paths buffers (free memory)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ClearDroppedFiles-Tuple{}","page":"Home","title":"Raylib.ClearDroppedFiles","text":"ClearDroppedFiles()\nlibraylib.ClearDroppedFiles()::Cvoid\n\nClear dropped files paths buffer (free memory)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ClearWindowState-Tuple{Integer}","page":"Home","title":"Raylib.ClearWindowState","text":"ClearWindowState(flags::Integer)\nlibraylib.ClearWindowState(flags::Cuint)::Cvoid\n\nClear window configuration state flags\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CloseAudioDevice-Tuple{}","page":"Home","title":"Raylib.CloseAudioDevice","text":"CloseAudioDevice()\nlibraylib.CloseAudioDevice()::Cvoid\n\nClose the audio device and context\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CloseAudioStream-Tuple{Raylib.RayAudioStream}","page":"Home","title":"Raylib.CloseAudioStream","text":"CloseAudioStream(stream::RayAudioStream)\nlibraylib.CloseAudioStream(stream::RayAudioStream)::Cvoid\n\nClose audio stream and free memory\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CloseWindow-Tuple{}","page":"Home","title":"Raylib.CloseWindow","text":"CloseWindow()\nlibraylib.CloseWindow()::Cvoid\n\nClose window and unload OpenGL context\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CodepointToUTF8-Tuple{Integer, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.CodepointToUTF8","text":"CodepointToUTF8(codepoint::Integer, byteSize::Ref{<:Integer})::String\nlibraylib.CodepointToUTF8(codepoint::Cint, byteSize::Ref{Cint})::Cstring\n\nEncode one codepoint into UTF-8 byte array (array length returned as parameter)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ColorAlpha-Tuple{ColorTypes.RGBA{FixedPointNumbers.N0f8}, Real}","page":"Home","title":"Raylib.ColorAlpha","text":"ColorAlpha(color::RayColor, alpha::Real)::RayColor\nlibraylib.ColorAlpha(color::RayColor, alpha::Cfloat)::RayColor\n\nReturns color with alpha applied, alpha goes from 0.0f to 1.0f\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ColorAlphaBlend-Tuple{ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ColorAlphaBlend","text":"ColorAlphaBlend(dst::RayColor, src::RayColor, tint::RayColor)::RayColor\nlibraylib.ColorAlphaBlend(dst::RayColor, src::RayColor, tint::RayColor)::RayColor\n\nReturns src alpha-blended into dst color with tint\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ColorFromHSV-Tuple{Real, Real, Real}","page":"Home","title":"Raylib.ColorFromHSV","text":"ColorFromHSV(hue::Real, saturation::Real, value::Real)::RayColor\nlibraylib.ColorFromHSV(hue::Cfloat, saturation::Cfloat, value::Cfloat)::RayColor\n\nReturns a Color from HSV values, hue [0..360], saturation/value [0..1]\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ColorFromNormalized-Tuple{NTuple{4, Float32}}","page":"Home","title":"Raylib.ColorFromNormalized","text":"ColorFromNormalized(normalized::RayVector4)::RayColor\nlibraylib.ColorFromNormalized(normalized::NTuple{4, Cfloat})::RayColor\n\nReturns Color from normalized values [0..1]\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ColorNormalize-Tuple{ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ColorNormalize","text":"ColorNormalize(color::RayColor)\nlibraylib.ColorNormalize(color::RayColor)::NTuple{4, Cfloat}\n\nReturns Color normalized as float [0..1]\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ColorToHSV-Tuple{ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ColorToHSV","text":"ColorToHSV(color::RayColor)\nlibraylib.ColorToHSV(color::RayColor)::NTuple{3, Cfloat}\n\nReturns HSV values for a Color, hue [0..360], saturation/value [0..1]\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ColorToInt-Tuple{ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ColorToInt","text":"ColorToInt(color::RayColor)\nlibraylib.ColorToInt(color::RayColor)::Cint\n\nReturns hexadecimal value for a Color\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.CompressData-Tuple{Ref{UInt8}, Integer, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.CompressData","text":"CompressData(data::Ref{UInt8}, dataLength::Integer, compDataLength::Ref{<:Integer})::Ref{UInt8}\nlibraylib.CompressData(data::Ref{Cuchar}, dataLength::Cint, compDataLength::Ref{Cint})::Ptr{Cuchar}\n\nCompress data (DEFLATE algorithm)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DecodeDataBase64-Tuple{Ref{UInt8}, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.DecodeDataBase64","text":"DecodeDataBase64(data::Ref{UInt8}, outputLength::Ref{<:Integer})::Ref{UInt8}\nlibraylib.DecodeDataBase64(data::Ref{Cuchar}, outputLength::Ref{Cint})::Ptr{Cuchar}\n\nDecode Base64 string data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DecompressData-Tuple{Ref{UInt8}, Integer, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.DecompressData","text":"DecompressData(compData::Ref{UInt8}, compDataLength::Integer, dataLength::Ref{<:Integer})::Ref{UInt8}\nlibraylib.DecompressData(compData::Ref{Cuchar}, compDataLength::Cint, dataLength::Ref{Cint})::Ptr{Cuchar}\n\nDecompress data (DEFLATE algorithm)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DirectoryExists-Tuple{String}","page":"Home","title":"Raylib.DirectoryExists","text":"DirectoryExists(dirPath::String)::Bool\nlibraylib.DirectoryExists(dirPath::Cstring)::Cuchar\n\nCheck if a directory path exists\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DisableCursor-Tuple{}","page":"Home","title":"Raylib.DisableCursor","text":"DisableCursor()\nlibraylib.DisableCursor()::Cvoid\n\nDisables cursor (lock cursor)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawBillboard-Tuple{Raylib.RayCamera3D, Raylib.RayTexture, Tuple{Float32, Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawBillboard","text":"DrawBillboard(camera::RayCamera3D, texture::RayTexture, position::RayVector3, size::Real, tint::RayColor)\nlibraylib.DrawBillboard(camera::RayCamera3D, texture::RayTexture, position::NTuple{3, Cfloat}, size::Cfloat, tint::RayColor)::Cvoid\n\nDraw a billboard texture\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawBillboardPro-Tuple{Raylib.RayCamera3D, Raylib.RayTexture, Raylib.RayRectangle, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawBillboardPro","text":"DrawBillboardPro(camera::RayCamera3D, texture::RayTexture, source::RayRectangle, position::RayVector3, up::RayVector3, size::RayVector2, origin::RayVector2, rotation::Real, tint::RayColor)\nlibraylib.DrawBillboardPro(camera::RayCamera3D, texture::RayTexture, source::RayRectangle, position::NTuple{3, Cfloat}, up::NTuple{3, Cfloat}, size::NTuple{2, Cfloat}, origin::NTuple{2, Cfloat}, rotation::Cfloat, tint::RayColor)::Cvoid\n\nDraw a billboard texture defined by source and rotation\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawBillboardRec-Tuple{Raylib.RayCamera3D, Raylib.RayTexture, Raylib.RayRectangle, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawBillboardRec","text":"DrawBillboardRec(camera::RayCamera3D, texture::RayTexture, source::RayRectangle, position::RayVector3, size::RayVector2, tint::RayColor)\nlibraylib.DrawBillboardRec(camera::RayCamera3D, texture::RayTexture, source::RayRectangle, position::NTuple{3, Cfloat}, size::NTuple{2, Cfloat}, tint::RayColor)::Cvoid\n\nDraw a billboard texture defined by source\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawBoundingBox-Tuple{Raylib.RayBoundingBox, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawBoundingBox","text":"DrawBoundingBox(box::RayBoundingBox, color::RayColor)\nlibraylib.DrawBoundingBox(box::RayBoundingBox, color::RayColor)::Cvoid\n\nDraw bounding box (wires)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCircle-Tuple{Integer, Integer, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCircle","text":"DrawCircle(centerX::Integer, centerY::Integer, radius::Real, color::RayColor)\nlibraylib.DrawCircle(centerX::Cint, centerY::Cint, radius::Cfloat, color::RayColor)::Cvoid\n\nDraw a color-filled circle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCircle3D-Tuple{Tuple{Float32, Float32, Float32}, Real, Tuple{Float32, Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCircle3D","text":"DrawCircle3D(center::RayVector3, radius::Real, rotationAxis::RayVector3, rotationAngle::Real, color::RayColor)\nlibraylib.DrawCircle3D(center::NTuple{3, Cfloat}, radius::Cfloat, rotationAxis::NTuple{3, Cfloat}, rotationAngle::Cfloat, color::RayColor)::Cvoid\n\nDraw a circle in 3D world space\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCircleGradient-Tuple{Integer, Integer, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCircleGradient","text":"DrawCircleGradient(centerX::Integer, centerY::Integer, radius::Real, color1::RayColor, color2::RayColor)\nlibraylib.DrawCircleGradient(centerX::Cint, centerY::Cint, radius::Cfloat, color1::RayColor, color2::RayColor)::Cvoid\n\nDraw a gradient-filled circle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCircleLines-Tuple{Integer, Integer, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCircleLines","text":"DrawCircleLines(centerX::Integer, centerY::Integer, radius::Real, color::RayColor)\nlibraylib.DrawCircleLines(centerX::Cint, centerY::Cint, radius::Cfloat, color::RayColor)::Cvoid\n\nDraw circle outline\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCircleSector-Tuple{Tuple{Float32, Float32}, Real, Real, Real, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCircleSector","text":"DrawCircleSector(center::RayVector2, radius::Real, startAngle::Real, endAngle::Real, segments::Integer, color::RayColor)\nlibraylib.DrawCircleSector(center::NTuple{2, Cfloat}, radius::Cfloat, startAngle::Cfloat, endAngle::Cfloat, segments::Cint, color::RayColor)::Cvoid\n\nDraw a piece of a circle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCircleSectorLines-Tuple{Tuple{Float32, Float32}, Real, Real, Real, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCircleSectorLines","text":"DrawCircleSectorLines(center::RayVector2, radius::Real, startAngle::Real, endAngle::Real, segments::Integer, color::RayColor)\nlibraylib.DrawCircleSectorLines(center::NTuple{2, Cfloat}, radius::Cfloat, startAngle::Cfloat, endAngle::Cfloat, segments::Cint, color::RayColor)::Cvoid\n\nDraw circle sector outline\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCircleV-Tuple{Tuple{Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCircleV","text":"DrawCircleV(center::RayVector2, radius::Real, color::RayColor)\nlibraylib.DrawCircleV(center::NTuple{2, Cfloat}, radius::Cfloat, color::RayColor)::Cvoid\n\nDraw a color-filled circle (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCube-Tuple{Tuple{Float32, Float32, Float32}, Real, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCube","text":"DrawCube(position::RayVector3, width::Real, height::Real, length::Real, color::RayColor)\nlibraylib.DrawCube(position::NTuple{3, Cfloat}, width::Cfloat, height::Cfloat, length::Cfloat, color::RayColor)::Cvoid\n\nDraw cube\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCubeTexture-Tuple{Raylib.RayTexture, Tuple{Float32, Float32, Float32}, Real, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCubeTexture","text":"DrawCubeTexture(texture::RayTexture, position::RayVector3, width::Real, height::Real, length::Real, color::RayColor)\nlibraylib.DrawCubeTexture(texture::RayTexture, position::NTuple{3, Cfloat}, width::Cfloat, height::Cfloat, length::Cfloat, color::RayColor)::Cvoid\n\nDraw cube textured\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCubeTextureRec-Tuple{Raylib.RayTexture, Raylib.RayRectangle, Tuple{Float32, Float32, Float32}, Real, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCubeTextureRec","text":"DrawCubeTextureRec(texture::RayTexture, source::RayRectangle, position::RayVector3, width::Real, height::Real, length::Real, color::RayColor)\nlibraylib.DrawCubeTextureRec(texture::RayTexture, source::RayRectangle, position::NTuple{3, Cfloat}, width::Cfloat, height::Cfloat, length::Cfloat, color::RayColor)::Cvoid\n\nDraw cube with a region of a texture\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCubeV-Tuple{Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCubeV","text":"DrawCubeV(position::RayVector3, size::RayVector3, color::RayColor)\nlibraylib.DrawCubeV(position::NTuple{3, Cfloat}, size::NTuple{3, Cfloat}, color::RayColor)::Cvoid\n\nDraw cube (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCubeWires-Tuple{Tuple{Float32, Float32, Float32}, Real, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCubeWires","text":"DrawCubeWires(position::RayVector3, width::Real, height::Real, length::Real, color::RayColor)\nlibraylib.DrawCubeWires(position::NTuple{3, Cfloat}, width::Cfloat, height::Cfloat, length::Cfloat, color::RayColor)::Cvoid\n\nDraw cube wires\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCubeWiresV-Tuple{Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCubeWiresV","text":"DrawCubeWiresV(position::RayVector3, size::RayVector3, color::RayColor)\nlibraylib.DrawCubeWiresV(position::NTuple{3, Cfloat}, size::NTuple{3, Cfloat}, color::RayColor)::Cvoid\n\nDraw cube wires (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCylinder-Tuple{Tuple{Float32, Float32, Float32}, Real, Real, Real, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCylinder","text":"DrawCylinder(position::RayVector3, radiusTop::Real, radiusBottom::Real, height::Real, slices::Integer, color::RayColor)\nlibraylib.DrawCylinder(position::NTuple{3, Cfloat}, radiusTop::Cfloat, radiusBottom::Cfloat, height::Cfloat, slices::Cint, color::RayColor)::Cvoid\n\nDraw a cylinder/cone\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCylinderEx-Tuple{Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, Real, Real, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCylinderEx","text":"DrawCylinderEx(startPos::RayVector3, endPos::RayVector3, startRadius::Real, endRadius::Real, sides::Integer, color::RayColor)\nlibraylib.DrawCylinderEx(startPos::NTuple{3, Cfloat}, endPos::NTuple{3, Cfloat}, startRadius::Cfloat, endRadius::Cfloat, sides::Cint, color::RayColor)::Cvoid\n\nDraw a cylinder with base at startPos and top at endPos\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCylinderWires-Tuple{Tuple{Float32, Float32, Float32}, Real, Real, Real, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCylinderWires","text":"DrawCylinderWires(position::RayVector3, radiusTop::Real, radiusBottom::Real, height::Real, slices::Integer, color::RayColor)\nlibraylib.DrawCylinderWires(position::NTuple{3, Cfloat}, radiusTop::Cfloat, radiusBottom::Cfloat, height::Cfloat, slices::Cint, color::RayColor)::Cvoid\n\nDraw a cylinder/cone wires\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawCylinderWiresEx-Tuple{Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, Real, Real, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawCylinderWiresEx","text":"DrawCylinderWiresEx(startPos::RayVector3, endPos::RayVector3, startRadius::Real, endRadius::Real, sides::Integer, color::RayColor)\nlibraylib.DrawCylinderWiresEx(startPos::NTuple{3, Cfloat}, endPos::NTuple{3, Cfloat}, startRadius::Cfloat, endRadius::Cfloat, sides::Cint, color::RayColor)::Cvoid\n\nDraw a cylinder wires with base at startPos and top at endPos\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawEllipse-Tuple{Integer, Integer, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawEllipse","text":"DrawEllipse(centerX::Integer, centerY::Integer, radiusH::Real, radiusV::Real, color::RayColor)\nlibraylib.DrawEllipse(centerX::Cint, centerY::Cint, radiusH::Cfloat, radiusV::Cfloat, color::RayColor)::Cvoid\n\nDraw ellipse\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawEllipseLines-Tuple{Integer, Integer, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawEllipseLines","text":"DrawEllipseLines(centerX::Integer, centerY::Integer, radiusH::Real, radiusV::Real, color::RayColor)\nlibraylib.DrawEllipseLines(centerX::Cint, centerY::Cint, radiusH::Cfloat, radiusV::Cfloat, color::RayColor)::Cvoid\n\nDraw ellipse outline\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawFPS-Tuple{Integer, Integer}","page":"Home","title":"Raylib.DrawFPS","text":"DrawFPS(posX::Integer, posY::Integer)\nlibraylib.DrawFPS(posX::Cint, posY::Cint)::Cvoid\n\nDraw current FPS\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawGrid-Tuple{Integer, Real}","page":"Home","title":"Raylib.DrawGrid","text":"DrawGrid(slices::Integer, spacing::Real)\nlibraylib.DrawGrid(slices::Cint, spacing::Cfloat)::Cvoid\n\nDraw a grid (centered at (0, 0, 0))\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawLine-Tuple{Integer, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawLine","text":"DrawLine(startPosX::Integer, startPosY::Integer, endPosX::Integer, endPosY::Integer, color::RayColor)\nlibraylib.DrawLine(startPosX::Cint, startPosY::Cint, endPosX::Cint, endPosY::Cint, color::RayColor)::Cvoid\n\nDraw a line\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawLine3D-Tuple{Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawLine3D","text":"DrawLine3D(startPos::RayVector3, endPos::RayVector3, color::RayColor)\nlibraylib.DrawLine3D(startPos::NTuple{3, Cfloat}, endPos::NTuple{3, Cfloat}, color::RayColor)::Cvoid\n\nDraw a line in 3D world space\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawLineBezier-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawLineBezier","text":"DrawLineBezier(startPos::RayVector2, endPos::RayVector2, thick::Real, color::RayColor)\nlibraylib.DrawLineBezier(startPos::NTuple{2, Cfloat}, endPos::NTuple{2, Cfloat}, thick::Cfloat, color::RayColor)::Cvoid\n\nDraw a line using cubic-bezier curves in-out\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawLineBezierCubic-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawLineBezierCubic","text":"DrawLineBezierCubic(startPos::RayVector2, endPos::RayVector2, startControlPos::RayVector2, endControlPos::RayVector2, thick::Real, color::RayColor)\nlibraylib.DrawLineBezierCubic(startPos::NTuple{2, Cfloat}, endPos::NTuple{2, Cfloat}, startControlPos::NTuple{2, Cfloat}, endControlPos::NTuple{2, Cfloat}, thick::Cfloat, color::RayColor)::Cvoid\n\nDraw line using cubic bezier curves with 2 control points\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawLineBezierQuad-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawLineBezierQuad","text":"DrawLineBezierQuad(startPos::RayVector2, endPos::RayVector2, controlPos::RayVector2, thick::Real, color::RayColor)\nlibraylib.DrawLineBezierQuad(startPos::NTuple{2, Cfloat}, endPos::NTuple{2, Cfloat}, controlPos::NTuple{2, Cfloat}, thick::Cfloat, color::RayColor)::Cvoid\n\nDraw line using quadratic bezier curves with a control point\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawLineEx-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawLineEx","text":"DrawLineEx(startPos::RayVector2, endPos::RayVector2, thick::Real, color::RayColor)\nlibraylib.DrawLineEx(startPos::NTuple{2, Cfloat}, endPos::NTuple{2, Cfloat}, thick::Cfloat, color::RayColor)::Cvoid\n\nDraw a line defining thickness\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawLineStrip-Tuple{Ref{Tuple{Float32, Float32}}, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawLineStrip","text":"DrawLineStrip(points::Ref{RayVector2}, pointsCount::Integer, color::RayColor)\nlibraylib.DrawLineStrip(points::Ref{NTuple{2, Cfloat}}, pointsCount::Cint, color::RayColor)::Cvoid\n\nDraw lines sequence\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawLineV-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawLineV","text":"DrawLineV(startPos::RayVector2, endPos::RayVector2, color::RayColor)\nlibraylib.DrawLineV(startPos::NTuple{2, Cfloat}, endPos::NTuple{2, Cfloat}, color::RayColor)::Cvoid\n\nDraw a line (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawMesh-Tuple{Raylib.RayMesh, Raylib.RayMaterial, NTuple{16, Float32}}","page":"Home","title":"Raylib.DrawMesh","text":"DrawMesh(mesh::RayMesh, material::RayMaterial, transform::RayMatrix)\nlibraylib.DrawMesh(mesh::RayMesh, material::RayMaterial, transform::NTuple{16, Cfloat})::Cvoid\n\nDraw a 3d mesh with material and transform\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawMeshInstanced-Tuple{Raylib.RayMesh, Raylib.RayMaterial, Ref{NTuple{16, Float32}}, Integer}","page":"Home","title":"Raylib.DrawMeshInstanced","text":"DrawMeshInstanced(mesh::RayMesh, material::RayMaterial, transforms::Ref{RayMatrix}, instances::Integer)\nlibraylib.DrawMeshInstanced(mesh::RayMesh, material::RayMaterial, transforms::Ref{NTuple{16, Cfloat}}, instances::Cint)::Cvoid\n\nDraw multiple mesh instances with material and different transforms\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawModel-Tuple{Raylib.RayModel, Tuple{Float32, Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawModel","text":"DrawModel(model::RayModel, position::RayVector3, scale::Real, tint::RayColor)\nlibraylib.DrawModel(model::RayModel, position::NTuple{3, Cfloat}, scale::Cfloat, tint::RayColor)::Cvoid\n\nDraw a model (with texture if set)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawModelEx-Tuple{Raylib.RayModel, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, Real, Tuple{Float32, Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawModelEx","text":"DrawModelEx(model::RayModel, position::RayVector3, rotationAxis::RayVector3, rotationAngle::Real, scale::RayVector3, tint::RayColor)\nlibraylib.DrawModelEx(model::RayModel, position::NTuple{3, Cfloat}, rotationAxis::NTuple{3, Cfloat}, rotationAngle::Cfloat, scale::NTuple{3, Cfloat}, tint::RayColor)::Cvoid\n\nDraw a model with extended parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawModelWires-Tuple{Raylib.RayModel, Tuple{Float32, Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawModelWires","text":"DrawModelWires(model::RayModel, position::RayVector3, scale::Real, tint::RayColor)\nlibraylib.DrawModelWires(model::RayModel, position::NTuple{3, Cfloat}, scale::Cfloat, tint::RayColor)::Cvoid\n\nDraw a model wires (with texture if set)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawModelWiresEx-Tuple{Raylib.RayModel, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, Real, Tuple{Float32, Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawModelWiresEx","text":"DrawModelWiresEx(model::RayModel, position::RayVector3, rotationAxis::RayVector3, rotationAngle::Real, scale::RayVector3, tint::RayColor)\nlibraylib.DrawModelWiresEx(model::RayModel, position::NTuple{3, Cfloat}, rotationAxis::NTuple{3, Cfloat}, rotationAngle::Cfloat, scale::NTuple{3, Cfloat}, tint::RayColor)::Cvoid\n\nDraw a model wires (with texture if set) with extended parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawPixel-Tuple{Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawPixel","text":"DrawPixel(posX::Integer, posY::Integer, color::RayColor)\nlibraylib.DrawPixel(posX::Cint, posY::Cint, color::RayColor)::Cvoid\n\nDraw a pixel\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawPixelV-Tuple{Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawPixelV","text":"DrawPixelV(position::RayVector2, color::RayColor)\nlibraylib.DrawPixelV(position::NTuple{2, Cfloat}, color::RayColor)::Cvoid\n\nDraw a pixel (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawPlane-Tuple{Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawPlane","text":"DrawPlane(centerPos::RayVector3, size::RayVector2, color::RayColor)\nlibraylib.DrawPlane(centerPos::NTuple{3, Cfloat}, size::NTuple{2, Cfloat}, color::RayColor)::Cvoid\n\nDraw a plane XZ\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawPoint3D-Tuple{Tuple{Float32, Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawPoint3D","text":"DrawPoint3D(position::RayVector3, color::RayColor)\nlibraylib.DrawPoint3D(position::NTuple{3, Cfloat}, color::RayColor)::Cvoid\n\nDraw a point in 3D space, actually a small line\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawPoly-Tuple{Tuple{Float32, Float32}, Integer, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawPoly","text":"DrawPoly(center::RayVector2, sides::Integer, radius::Real, rotation::Real, color::RayColor)\nlibraylib.DrawPoly(center::NTuple{2, Cfloat}, sides::Cint, radius::Cfloat, rotation::Cfloat, color::RayColor)::Cvoid\n\nDraw a regular polygon (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawPolyLines-Tuple{Tuple{Float32, Float32}, Integer, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawPolyLines","text":"DrawPolyLines(center::RayVector2, sides::Integer, radius::Real, rotation::Real, color::RayColor)\nlibraylib.DrawPolyLines(center::NTuple{2, Cfloat}, sides::Cint, radius::Cfloat, rotation::Cfloat, color::RayColor)::Cvoid\n\nDraw a polygon outline of n sides\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawPolyLinesEx-Tuple{Tuple{Float32, Float32}, Integer, Real, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawPolyLinesEx","text":"DrawPolyLinesEx(center::RayVector2, sides::Integer, radius::Real, rotation::Real, lineThick::Real, color::RayColor)\nlibraylib.DrawPolyLinesEx(center::NTuple{2, Cfloat}, sides::Cint, radius::Cfloat, rotation::Cfloat, lineThick::Cfloat, color::RayColor)::Cvoid\n\nDraw a polygon outline of n sides with extended parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRay-Tuple{Raylib.Ray, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRay","text":"DrawRay(ray::Ray, color::RayColor)\nlibraylib.DrawRay(ray::Ray, color::RayColor)::Cvoid\n\nDraw a ray line\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectangle-Tuple{Integer, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectangle","text":"DrawRectangle(posX::Integer, posY::Integer, width::Integer, height::Integer, color::RayColor)\nlibraylib.DrawRectangle(posX::Cint, posY::Cint, width::Cint, height::Cint, color::RayColor)::Cvoid\n\nDraw a color-filled rectangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectangleGradientEx-Tuple{Raylib.RayRectangle, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectangleGradientEx","text":"DrawRectangleGradientEx(rec::RayRectangle, col1::RayColor, col2::RayColor, col3::RayColor, col4::RayColor)\nlibraylib.DrawRectangleGradientEx(rec::RayRectangle, col1::RayColor, col2::RayColor, col3::RayColor, col4::RayColor)::Cvoid\n\nDraw a gradient-filled rectangle with custom vertex colors\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectangleGradientH-Tuple{Integer, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectangleGradientH","text":"DrawRectangleGradientH(posX::Integer, posY::Integer, width::Integer, height::Integer, color1::RayColor, color2::RayColor)\nlibraylib.DrawRectangleGradientH(posX::Cint, posY::Cint, width::Cint, height::Cint, color1::RayColor, color2::RayColor)::Cvoid\n\nDraw a horizontal-gradient-filled rectangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectangleGradientV-Tuple{Integer, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectangleGradientV","text":"DrawRectangleGradientV(posX::Integer, posY::Integer, width::Integer, height::Integer, color1::RayColor, color2::RayColor)\nlibraylib.DrawRectangleGradientV(posX::Cint, posY::Cint, width::Cint, height::Cint, color1::RayColor, color2::RayColor)::Cvoid\n\nDraw a vertical-gradient-filled rectangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectangleLines-Tuple{Integer, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectangleLines","text":"DrawRectangleLines(posX::Integer, posY::Integer, width::Integer, height::Integer, color::RayColor)\nlibraylib.DrawRectangleLines(posX::Cint, posY::Cint, width::Cint, height::Cint, color::RayColor)::Cvoid\n\nDraw rectangle outline\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectangleLinesEx-Tuple{Raylib.RayRectangle, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectangleLinesEx","text":"DrawRectangleLinesEx(rec::RayRectangle, lineThick::Integer, color::RayColor)\nlibraylib.DrawRectangleLinesEx(rec::RayRectangle, lineThick::Cint, color::RayColor)::Cvoid\n\nDraw rectangle outline with extended parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectanglePro-Tuple{Raylib.RayRectangle, Tuple{Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectanglePro","text":"DrawRectanglePro(rec::RayRectangle, origin::RayVector2, rotation::Real, color::RayColor)\nlibraylib.DrawRectanglePro(rec::RayRectangle, origin::NTuple{2, Cfloat}, rotation::Cfloat, color::RayColor)::Cvoid\n\nDraw a color-filled rectangle with pro parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectangleRec-Tuple{Raylib.RayRectangle, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectangleRec","text":"DrawRectangleRec(rec::RayRectangle, color::RayColor)\nlibraylib.DrawRectangleRec(rec::RayRectangle, color::RayColor)::Cvoid\n\nDraw a color-filled rectangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectangleRounded-Tuple{Raylib.RayRectangle, Real, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectangleRounded","text":"DrawRectangleRounded(rec::RayRectangle, roundness::Real, segments::Integer, color::RayColor)\nlibraylib.DrawRectangleRounded(rec::RayRectangle, roundness::Cfloat, segments::Cint, color::RayColor)::Cvoid\n\nDraw rectangle with rounded edges\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectangleRoundedLines-Tuple{Raylib.RayRectangle, Real, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectangleRoundedLines","text":"DrawRectangleRoundedLines(rec::RayRectangle, roundness::Real, segments::Integer, lineThick::Integer, color::RayColor)\nlibraylib.DrawRectangleRoundedLines(rec::RayRectangle, roundness::Cfloat, segments::Cint, lineThick::Cint, color::RayColor)::Cvoid\n\nDraw rectangle with rounded edges outline\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRectangleV-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRectangleV","text":"DrawRectangleV(position::RayVector2, size::RayVector2, color::RayColor)\nlibraylib.DrawRectangleV(position::NTuple{2, Cfloat}, size::NTuple{2, Cfloat}, color::RayColor)::Cvoid\n\nDraw a color-filled rectangle (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRing-Tuple{Tuple{Float32, Float32}, Real, Real, Real, Real, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRing","text":"DrawRing(center::RayVector2, innerRadius::Real, outerRadius::Real, startAngle::Real, endAngle::Real, segments::Integer, color::RayColor)\nlibraylib.DrawRing(center::NTuple{2, Cfloat}, innerRadius::Cfloat, outerRadius::Cfloat, startAngle::Cfloat, endAngle::Cfloat, segments::Cint, color::RayColor)::Cvoid\n\nDraw ring\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawRingLines-Tuple{Tuple{Float32, Float32}, Real, Real, Real, Real, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawRingLines","text":"DrawRingLines(center::RayVector2, innerRadius::Real, outerRadius::Real, startAngle::Real, endAngle::Real, segments::Integer, color::RayColor)\nlibraylib.DrawRingLines(center::NTuple{2, Cfloat}, innerRadius::Cfloat, outerRadius::Cfloat, startAngle::Cfloat, endAngle::Cfloat, segments::Cint, color::RayColor)::Cvoid\n\nDraw ring outline\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawSphere-Tuple{Tuple{Float32, Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawSphere","text":"DrawSphere(centerPos::RayVector3, radius::Real, color::RayColor)\nlibraylib.DrawSphere(centerPos::NTuple{3, Cfloat}, radius::Cfloat, color::RayColor)::Cvoid\n\nDraw sphere\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawSphereEx-Tuple{Tuple{Float32, Float32, Float32}, Real, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawSphereEx","text":"DrawSphereEx(centerPos::RayVector3, radius::Real, rings::Integer, slices::Integer, color::RayColor)\nlibraylib.DrawSphereEx(centerPos::NTuple{3, Cfloat}, radius::Cfloat, rings::Cint, slices::Cint, color::RayColor)::Cvoid\n\nDraw sphere with extended parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawSphereWires-Tuple{Tuple{Float32, Float32, Float32}, Real, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawSphereWires","text":"DrawSphereWires(centerPos::RayVector3, radius::Real, rings::Integer, slices::Integer, color::RayColor)\nlibraylib.DrawSphereWires(centerPos::NTuple{3, Cfloat}, radius::Cfloat, rings::Cint, slices::Cint, color::RayColor)::Cvoid\n\nDraw sphere wires\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawText-Tuple{String, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawText","text":"DrawText(text::String, posX::Integer, posY::Integer, fontSize::Integer, color::RayColor)\nlibraylib.DrawText(text::Cstring, posX::Cint, posY::Cint, fontSize::Cint, color::RayColor)::Cvoid\n\nDraw text (using default font)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTextCodepoint-Tuple{Raylib.RayFont, Integer, Tuple{Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTextCodepoint","text":"DrawTextCodepoint(font::RayFont, codepoint::Integer, position::RayVector2, fontSize::Real, tint::RayColor)\nlibraylib.DrawTextCodepoint(font::RayFont, codepoint::Cint, position::NTuple{2, Cfloat}, fontSize::Cfloat, tint::RayColor)::Cvoid\n\nDraw one character (codepoint)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTextEx-Tuple{Raylib.RayFont, String, Tuple{Float32, Float32}, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTextEx","text":"DrawTextEx(font::RayFont, text::String, position::RayVector2, fontSize::Real, spacing::Real, tint::RayColor)\nlibraylib.DrawTextEx(font::RayFont, text::Cstring, position::NTuple{2, Cfloat}, fontSize::Cfloat, spacing::Cfloat, tint::RayColor)::Cvoid\n\nDraw text using font and additional parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTextPro-Tuple{Raylib.RayFont, String, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Real, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTextPro","text":"DrawTextPro(font::RayFont, text::String, position::RayVector2, origin::RayVector2, rotation::Real, fontSize::Real, spacing::Real, tint::RayColor)\nlibraylib.DrawTextPro(font::RayFont, text::Cstring, position::NTuple{2, Cfloat}, origin::NTuple{2, Cfloat}, rotation::Cfloat, fontSize::Cfloat, spacing::Cfloat, tint::RayColor)::Cvoid\n\nDraw text using Font and pro parameters (rotation)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTexture-Tuple{Raylib.RayTexture, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTexture","text":"DrawTexture(texture::RayTexture, posX::Integer, posY::Integer, tint::RayColor)\nlibraylib.DrawTexture(texture::RayTexture, posX::Cint, posY::Cint, tint::RayColor)::Cvoid\n\nDraw a Texture2D\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTextureEx-Tuple{Raylib.RayTexture, Tuple{Float32, Float32}, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTextureEx","text":"DrawTextureEx(texture::RayTexture, position::RayVector2, rotation::Real, scale::Real, tint::RayColor)\nlibraylib.DrawTextureEx(texture::RayTexture, position::NTuple{2, Cfloat}, rotation::Cfloat, scale::Cfloat, tint::RayColor)::Cvoid\n\nDraw a Texture2D with extended parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTextureNPatch-Tuple{Raylib.RayTexture, Raylib.RayNPatchInfo, Raylib.RayRectangle, Tuple{Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTextureNPatch","text":"DrawTextureNPatch(texture::RayTexture, nPatchInfo::RayNPatchInfo, dest::RayRectangle, origin::RayVector2, rotation::Real, tint::RayColor)\nlibraylib.DrawTextureNPatch(texture::RayTexture, nPatchInfo::RayNPatchInfo, dest::RayRectangle, origin::NTuple{2, Cfloat}, rotation::Cfloat, tint::RayColor)::Cvoid\n\nDraws a texture (or part of it) that stretches or shrinks nicely\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTexturePoly-Tuple{Raylib.RayTexture, Tuple{Float32, Float32}, Ref{Tuple{Float32, Float32}}, Ref{Tuple{Float32, Float32}}, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTexturePoly","text":"DrawTexturePoly(texture::RayTexture, center::RayVector2, points::Ref{RayVector2}, texcoords::Ref{RayVector2}, pointsCount::Integer, tint::RayColor)\nlibraylib.DrawTexturePoly(texture::RayTexture, center::NTuple{2, Cfloat}, points::Ref{NTuple{2, Cfloat}}, texcoords::Ref{NTuple{2, Cfloat}}, pointsCount::Cint, tint::RayColor)::Cvoid\n\nDraw a textured polygon\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTexturePro-Tuple{Raylib.RayTexture, Raylib.RayRectangle, Raylib.RayRectangle, Tuple{Float32, Float32}, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTexturePro","text":"DrawTexturePro(texture::RayTexture, source::RayRectangle, dest::RayRectangle, origin::RayVector2, rotation::Real, tint::RayColor)\nlibraylib.DrawTexturePro(texture::RayTexture, source::RayRectangle, dest::RayRectangle, origin::NTuple{2, Cfloat}, rotation::Cfloat, tint::RayColor)::Cvoid\n\nDraw a part of a texture defined by a rectangle with 'pro' parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTextureQuad-Tuple{Raylib.RayTexture, Tuple{Float32, Float32}, Tuple{Float32, Float32}, Raylib.RayRectangle, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTextureQuad","text":"DrawTextureQuad(texture::RayTexture, tiling::RayVector2, offset::RayVector2, quad::RayRectangle, tint::RayColor)\nlibraylib.DrawTextureQuad(texture::RayTexture, tiling::NTuple{2, Cfloat}, offset::NTuple{2, Cfloat}, quad::RayRectangle, tint::RayColor)::Cvoid\n\nDraw texture quad with tiling and offset parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTextureRec-Tuple{Raylib.RayTexture, Raylib.RayRectangle, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTextureRec","text":"DrawTextureRec(texture::RayTexture, source::RayRectangle, position::RayVector2, tint::RayColor)\nlibraylib.DrawTextureRec(texture::RayTexture, source::RayRectangle, position::NTuple{2, Cfloat}, tint::RayColor)::Cvoid\n\nDraw a part of a texture defined by a rectangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTextureTiled-Tuple{Raylib.RayTexture, Raylib.RayRectangle, Raylib.RayRectangle, Tuple{Float32, Float32}, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTextureTiled","text":"DrawTextureTiled(texture::RayTexture, source::RayRectangle, dest::RayRectangle, origin::RayVector2, rotation::Real, scale::Real, tint::RayColor)\nlibraylib.DrawTextureTiled(texture::RayTexture, source::RayRectangle, dest::RayRectangle, origin::NTuple{2, Cfloat}, rotation::Cfloat, scale::Cfloat, tint::RayColor)::Cvoid\n\nDraw part of a texture (defined by a rectangle) with rotation and scale tiled into dest.\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTextureV-Tuple{Raylib.RayTexture, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTextureV","text":"DrawTextureV(texture::RayTexture, position::RayVector2, tint::RayColor)\nlibraylib.DrawTextureV(texture::RayTexture, position::NTuple{2, Cfloat}, tint::RayColor)::Cvoid\n\nDraw a Texture2D with position defined as Vector2\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTriangle-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTriangle","text":"DrawTriangle(v1::RayVector2, v2::RayVector2, v3::RayVector2, color::RayColor)\nlibraylib.DrawTriangle(v1::NTuple{2, Cfloat}, v2::NTuple{2, Cfloat}, v3::NTuple{2, Cfloat}, color::RayColor)::Cvoid\n\nDraw a color-filled triangle (vertex in counter-clockwise order!)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTriangle3D-Tuple{Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTriangle3D","text":"DrawTriangle3D(v1::RayVector3, v2::RayVector3, v3::RayVector3, color::RayColor)\nlibraylib.DrawTriangle3D(v1::NTuple{3, Cfloat}, v2::NTuple{3, Cfloat}, v3::NTuple{3, Cfloat}, color::RayColor)::Cvoid\n\nDraw a color-filled triangle (vertex in counter-clockwise order!)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTriangleFan-Tuple{Ref{Tuple{Float32, Float32}}, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTriangleFan","text":"DrawTriangleFan(points::Ref{RayVector2}, pointsCount::Integer, color::RayColor)\nlibraylib.DrawTriangleFan(points::Ref{NTuple{2, Cfloat}}, pointsCount::Cint, color::RayColor)::Cvoid\n\nDraw a triangle fan defined by points (first vertex is the center)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTriangleLines-Tuple{Tuple{Float32, Float32}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTriangleLines","text":"DrawTriangleLines(v1::RayVector2, v2::RayVector2, v3::RayVector2, color::RayColor)\nlibraylib.DrawTriangleLines(v1::NTuple{2, Cfloat}, v2::NTuple{2, Cfloat}, v3::NTuple{2, Cfloat}, color::RayColor)::Cvoid\n\nDraw triangle outline (vertex in counter-clockwise order!)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTriangleStrip-Tuple{Ref{Tuple{Float32, Float32}}, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTriangleStrip","text":"DrawTriangleStrip(points::Ref{RayVector2}, pointsCount::Integer, color::RayColor)\nlibraylib.DrawTriangleStrip(points::Ref{NTuple{2, Cfloat}}, pointsCount::Cint, color::RayColor)::Cvoid\n\nDraw a triangle strip defined by points\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.DrawTriangleStrip3D-Tuple{Ref{Tuple{Float32, Float32, Float32}}, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.DrawTriangleStrip3D","text":"DrawTriangleStrip3D(points::Ref{RayVector3}, pointsCount::Integer, color::RayColor)\nlibraylib.DrawTriangleStrip3D(points::Ref{NTuple{3, Cfloat}}, pointsCount::Cint, color::RayColor)::Cvoid\n\nDraw a triangle strip defined by points\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.EnableCursor-Tuple{}","page":"Home","title":"Raylib.EnableCursor","text":"EnableCursor()\nlibraylib.EnableCursor()::Cvoid\n\nEnables cursor (unlock cursor)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.EncodeDataBase64-Tuple{Ref{UInt8}, Integer, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.EncodeDataBase64","text":"EncodeDataBase64(data::Ref{UInt8}, dataLength::Integer, outputLength::Ref{<:Integer})::String\nlibraylib.EncodeDataBase64(data::Ref{Cuchar}, dataLength::Cint, outputLength::Ref{Cint})::Cstring\n\nEncode data to Base64 string\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.EndBlendMode-Tuple{}","page":"Home","title":"Raylib.EndBlendMode","text":"EndBlendMode()\nlibraylib.EndBlendMode()::Cvoid\n\nEnd blending mode (reset to default: alpha blending)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.EndDrawing-Tuple{}","page":"Home","title":"Raylib.EndDrawing","text":"EndDrawing()\nlibraylib.EndDrawing()::Cvoid\n\nEnd canvas drawing and swap buffers (double buffering)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.EndMode2D-Tuple{}","page":"Home","title":"Raylib.EndMode2D","text":"EndMode2D()\nlibraylib.EndMode2D()::Cvoid\n\nEnds 2D mode with custom camera\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.EndMode3D-Tuple{}","page":"Home","title":"Raylib.EndMode3D","text":"EndMode3D()\nlibraylib.EndMode3D()::Cvoid\n\nEnds 3D mode and returns to default 2D orthographic mode\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.EndScissorMode-Tuple{}","page":"Home","title":"Raylib.EndScissorMode","text":"EndScissorMode()\nlibraylib.EndScissorMode()::Cvoid\n\nEnd scissor mode\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.EndShaderMode-Tuple{}","page":"Home","title":"Raylib.EndShaderMode","text":"EndShaderMode()\nlibraylib.EndShaderMode()::Cvoid\n\nEnd custom shader drawing (use default shader)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.EndTextureMode-Tuple{}","page":"Home","title":"Raylib.EndTextureMode","text":"EndTextureMode()\nlibraylib.EndTextureMode()::Cvoid\n\nEnds drawing to render texture\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.EndVrStereoMode-Tuple{}","page":"Home","title":"Raylib.EndVrStereoMode","text":"EndVrStereoMode()\nlibraylib.EndVrStereoMode()::Cvoid\n\nEnd stereo rendering (requires VR simulator)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ExportImage-Tuple{Raylib.RayImage, String}","page":"Home","title":"Raylib.ExportImage","text":"ExportImage(image::RayImage, fileName::String)::Bool\nlibraylib.ExportImage(image::RayImage, fileName::Cstring)::Cuchar\n\nExport image data to file, returns true on success\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ExportImageAsCode-Tuple{Raylib.RayImage, String}","page":"Home","title":"Raylib.ExportImageAsCode","text":"ExportImageAsCode(image::RayImage, fileName::String)::Bool\nlibraylib.ExportImageAsCode(image::RayImage, fileName::Cstring)::Cuchar\n\nExport image as code file defining an array of bytes, returns true on success\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ExportMesh-Tuple{Raylib.RayMesh, String}","page":"Home","title":"Raylib.ExportMesh","text":"ExportMesh(mesh::RayMesh, fileName::String)::Bool\nlibraylib.ExportMesh(mesh::RayMesh, fileName::Cstring)::Cuchar\n\nExport mesh data to file, returns true on success\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ExportWave-Tuple{Raylib.RayWave, String}","page":"Home","title":"Raylib.ExportWave","text":"ExportWave(wave::RayWave, fileName::String)::Bool\nlibraylib.ExportWave(wave::RayWave, fileName::Cstring)::Cuchar\n\nExport wave data to file, returns true on success\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ExportWaveAsCode-Tuple{Raylib.RayWave, String}","page":"Home","title":"Raylib.ExportWaveAsCode","text":"ExportWaveAsCode(wave::RayWave, fileName::String)::Bool\nlibraylib.ExportWaveAsCode(wave::RayWave, fileName::Cstring)::Cuchar\n\nExport wave sample data to code (.h), returns true on success\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.Fade-Tuple{ColorTypes.RGBA{FixedPointNumbers.N0f8}, Real}","page":"Home","title":"Raylib.Fade","text":"Fade(color::RayColor, alpha::Real)::RayColor\nlibraylib.Fade(color::RayColor, alpha::Cfloat)::RayColor\n\nReturns color with alpha applied, alpha goes from 0.0f to 1.0f\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.FileExists-Tuple{String}","page":"Home","title":"Raylib.FileExists","text":"FileExists(fileName::String)::Bool\nlibraylib.FileExists(fileName::Cstring)::Cuchar\n\nCheck if file exists\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenImageCellular-Tuple{Integer, Integer, Integer}","page":"Home","title":"Raylib.GenImageCellular","text":"GenImageCellular(width::Integer, height::Integer, tileSize::Integer)::RayImage\nlibraylib.GenImageCellular(width::Cint, height::Cint, tileSize::Cint)::RayImage\n\nGenerate image: cellular algorithm. Bigger tileSize means bigger cells\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenImageChecked-Tuple{Integer, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.GenImageChecked","text":"GenImageChecked(width::Integer, height::Integer, checksX::Integer, checksY::Integer, col1::RayColor, col2::RayColor)::RayImage\nlibraylib.GenImageChecked(width::Cint, height::Cint, checksX::Cint, checksY::Cint, col1::RayColor, col2::RayColor)::RayImage\n\nGenerate image: checked\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenImageColor-Tuple{Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.GenImageColor","text":"GenImageColor(width::Integer, height::Integer, color::RayColor)::RayImage\nlibraylib.GenImageColor(width::Cint, height::Cint, color::RayColor)::RayImage\n\nGenerate image: plain color\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenImageFontAtlas-Tuple{Ref{Raylib.RayGlyphInfo}, Ref{Raylib.RayRectangle}, Integer, Integer, Integer, Integer}","page":"Home","title":"Raylib.GenImageFontAtlas","text":"GenImageFontAtlas(chars::Ref{RayGlyphInfo}, recs::Ref{RayRectangle}, glyphCount::Integer, fontSize::Integer, padding::Integer, packMethod::Integer)::RayImage\nlibraylib.GenImageFontAtlas(chars::Ref{RayGlyphInfo}, recs::Ref{RayRectangle}, glyphCount::Cint, fontSize::Cint, padding::Cint, packMethod::Cint)::RayImage\n\nGenerate image font atlas using chars info\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenImageGradientH-Tuple{Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.GenImageGradientH","text":"GenImageGradientH(width::Integer, height::Integer, left::RayColor, right::RayColor)::RayImage\nlibraylib.GenImageGradientH(width::Cint, height::Cint, left::RayColor, right::RayColor)::RayImage\n\nGenerate image: horizontal gradient\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenImageGradientRadial-Tuple{Integer, Integer, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.GenImageGradientRadial","text":"GenImageGradientRadial(width::Integer, height::Integer, density::Real, inner::RayColor, outer::RayColor)::RayImage\nlibraylib.GenImageGradientRadial(width::Cint, height::Cint, density::Cfloat, inner::RayColor, outer::RayColor)::RayImage\n\nGenerate image: radial gradient\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenImageGradientV-Tuple{Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.GenImageGradientV","text":"GenImageGradientV(width::Integer, height::Integer, top::RayColor, bottom::RayColor)::RayImage\nlibraylib.GenImageGradientV(width::Cint, height::Cint, top::RayColor, bottom::RayColor)::RayImage\n\nGenerate image: vertical gradient\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenImageWhiteNoise-Tuple{Integer, Integer, Real}","page":"Home","title":"Raylib.GenImageWhiteNoise","text":"GenImageWhiteNoise(width::Integer, height::Integer, factor::Real)::RayImage\nlibraylib.GenImageWhiteNoise(width::Cint, height::Cint, factor::Cfloat)::RayImage\n\nGenerate image: white noise\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshBinormals-Tuple{Ref{Raylib.RayMesh}}","page":"Home","title":"Raylib.GenMeshBinormals","text":"GenMeshBinormals(mesh::Ref{RayMesh})\nlibraylib.GenMeshBinormals(mesh::Ref{RayMesh})::Cvoid\n\nCompute mesh binormals\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshCone-Tuple{Real, Real, Integer}","page":"Home","title":"Raylib.GenMeshCone","text":"GenMeshCone(radius::Real, height::Real, slices::Integer)::RayMesh\nlibraylib.GenMeshCone(radius::Cfloat, height::Cfloat, slices::Cint)::RayMesh\n\nGenerate cone/pyramid mesh\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshCube-Tuple{Real, Real, Real}","page":"Home","title":"Raylib.GenMeshCube","text":"GenMeshCube(width::Real, height::Real, length::Real)::RayMesh\nlibraylib.GenMeshCube(width::Cfloat, height::Cfloat, length::Cfloat)::RayMesh\n\nGenerate cuboid mesh\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshCubicmap-Tuple{Raylib.RayImage, Tuple{Float32, Float32, Float32}}","page":"Home","title":"Raylib.GenMeshCubicmap","text":"GenMeshCubicmap(cubicmap::RayImage, cubeSize::RayVector3)::RayMesh\nlibraylib.GenMeshCubicmap(cubicmap::RayImage, cubeSize::NTuple{3, Cfloat})::RayMesh\n\nGenerate cubes-based map mesh from image data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshCylinder-Tuple{Real, Real, Integer}","page":"Home","title":"Raylib.GenMeshCylinder","text":"GenMeshCylinder(radius::Real, height::Real, slices::Integer)::RayMesh\nlibraylib.GenMeshCylinder(radius::Cfloat, height::Cfloat, slices::Cint)::RayMesh\n\nGenerate cylinder mesh\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshHeightmap-Tuple{Raylib.RayImage, Tuple{Float32, Float32, Float32}}","page":"Home","title":"Raylib.GenMeshHeightmap","text":"GenMeshHeightmap(heightmap::RayImage, size::RayVector3)::RayMesh\nlibraylib.GenMeshHeightmap(heightmap::RayImage, size::NTuple{3, Cfloat})::RayMesh\n\nGenerate heightmap mesh from image data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshHemiSphere-Tuple{Real, Integer, Integer}","page":"Home","title":"Raylib.GenMeshHemiSphere","text":"GenMeshHemiSphere(radius::Real, rings::Integer, slices::Integer)::RayMesh\nlibraylib.GenMeshHemiSphere(radius::Cfloat, rings::Cint, slices::Cint)::RayMesh\n\nGenerate half-sphere mesh (no bottom cap)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshKnot-Tuple{Real, Real, Integer, Integer}","page":"Home","title":"Raylib.GenMeshKnot","text":"GenMeshKnot(radius::Real, size::Real, radSeg::Integer, sides::Integer)::RayMesh\nlibraylib.GenMeshKnot(radius::Cfloat, size::Cfloat, radSeg::Cint, sides::Cint)::RayMesh\n\nGenerate trefoil knot mesh\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshPlane-Tuple{Real, Real, Integer, Integer}","page":"Home","title":"Raylib.GenMeshPlane","text":"GenMeshPlane(width::Real, length::Real, resX::Integer, resZ::Integer)::RayMesh\nlibraylib.GenMeshPlane(width::Cfloat, length::Cfloat, resX::Cint, resZ::Cint)::RayMesh\n\nGenerate plane mesh (with subdivisions)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshPoly-Tuple{Integer, Real}","page":"Home","title":"Raylib.GenMeshPoly","text":"GenMeshPoly(sides::Integer, radius::Real)::RayMesh\nlibraylib.GenMeshPoly(sides::Cint, radius::Cfloat)::RayMesh\n\nGenerate polygonal mesh\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshSphere-Tuple{Real, Integer, Integer}","page":"Home","title":"Raylib.GenMeshSphere","text":"GenMeshSphere(radius::Real, rings::Integer, slices::Integer)::RayMesh\nlibraylib.GenMeshSphere(radius::Cfloat, rings::Cint, slices::Cint)::RayMesh\n\nGenerate sphere mesh (standard sphere)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshTangents-Tuple{Ref{Raylib.RayMesh}}","page":"Home","title":"Raylib.GenMeshTangents","text":"GenMeshTangents(mesh::Ref{RayMesh})\nlibraylib.GenMeshTangents(mesh::Ref{RayMesh})::Cvoid\n\nCompute mesh tangents\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenMeshTorus-Tuple{Real, Real, Integer, Integer}","page":"Home","title":"Raylib.GenMeshTorus","text":"GenMeshTorus(radius::Real, size::Real, radSeg::Integer, sides::Integer)::RayMesh\nlibraylib.GenMeshTorus(radius::Cfloat, size::Cfloat, radSeg::Cint, sides::Cint)::RayMesh\n\nGenerate torus mesh\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GenTextureMipmaps-Tuple{Ref{Raylib.RayTexture}}","page":"Home","title":"Raylib.GenTextureMipmaps","text":"GenTextureMipmaps(texture::Ref{RayTexture})\nlibraylib.GenTextureMipmaps(texture::Ref{RayTexture})::Cvoid\n\nGenerate GPU mipmaps for a texture\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetCameraMatrix-Tuple{Raylib.RayCamera3D}","page":"Home","title":"Raylib.GetCameraMatrix","text":"GetCameraMatrix(camera::RayCamera3D)\nlibraylib.GetCameraMatrix(camera::RayCamera3D)::NTuple{16, Cfloat}\n\nGet camera transform matrix (view matrix)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetCameraMatrix2D-Tuple{Raylib.RayCamera2D}","page":"Home","title":"Raylib.GetCameraMatrix2D","text":"GetCameraMatrix2D(camera::RayCamera2D)\nlibraylib.GetCameraMatrix2D(camera::RayCamera2D)::NTuple{16, Cfloat}\n\nGet camera 2d transform matrix\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetCharPressed-Tuple{}","page":"Home","title":"Raylib.GetCharPressed","text":"GetCharPressed()\nlibraylib.GetCharPressed()::Cint\n\nGet char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetClipboardText-Tuple{}","page":"Home","title":"Raylib.GetClipboardText","text":"GetClipboardText()::String\nlibraylib.GetClipboardText()::Cstring\n\nGet clipboard text content\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetCodepoint-Tuple{String, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.GetCodepoint","text":"GetCodepoint(text::String, bytesProcessed::Ref{<:Integer})\nlibraylib.GetCodepoint(text::Cstring, bytesProcessed::Ref{Cint})::Cint\n\nGet next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetCodepointCount-Tuple{String}","page":"Home","title":"Raylib.GetCodepointCount","text":"GetCodepointCount(text::String)\nlibraylib.GetCodepointCount(text::Cstring)::Cint\n\nGet total number of codepoints in a UTF-8 encoded string\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetCollisionRec-Tuple{Raylib.RayRectangle, Raylib.RayRectangle}","page":"Home","title":"Raylib.GetCollisionRec","text":"GetCollisionRec(rec1::RayRectangle, rec2::RayRectangle)::RayRectangle\nlibraylib.GetCollisionRec(rec1::RayRectangle, rec2::RayRectangle)::RayRectangle\n\nGet collision rectangle for two rectangles collision\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetColor-Tuple{Integer}","page":"Home","title":"Raylib.GetColor","text":"GetColor(hexValue::Integer)::RayColor\nlibraylib.GetColor(hexValue::Cuint)::RayColor\n\nGet Color structure from hexadecimal value\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetCurrentMonitor-Tuple{}","page":"Home","title":"Raylib.GetCurrentMonitor","text":"GetCurrentMonitor()\nlibraylib.GetCurrentMonitor()::Cint\n\nGet current connected monitor\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetDirectoryFiles-Tuple{String, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.GetDirectoryFiles","text":"GetDirectoryFiles(dirPath::String, count::Ref{<:Integer})::Ref{Cstring}\nlibraylib.GetDirectoryFiles(dirPath::Cstring, count::Ref{Cint})::Ptr{Cstring}\n\nGet filenames in a directory path (memory should be freed)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetDirectoryPath-Tuple{String}","page":"Home","title":"Raylib.GetDirectoryPath","text":"GetDirectoryPath(filePath::String)::String\nlibraylib.GetDirectoryPath(filePath::Cstring)::Cstring\n\nGet full path for a given fileName with path (uses static string)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetDroppedFiles-Tuple{Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.GetDroppedFiles","text":"GetDroppedFiles(count::Ref{<:Integer})::Ref{Cstring}\nlibraylib.GetDroppedFiles(count::Ref{Cint})::Ptr{Cstring}\n\nGet dropped files names (memory should be freed)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetDroppedFiles-Tuple{}","page":"Home","title":"Raylib.GetDroppedFiles","text":"GetDroppedFiles()\n\nReturn a list of dropped file paths.\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetFPS-Tuple{}","page":"Home","title":"Raylib.GetFPS","text":"GetFPS()\nlibraylib.GetFPS()::Cint\n\nGet current FPS\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetFileExtension-Tuple{String}","page":"Home","title":"Raylib.GetFileExtension","text":"GetFileExtension(fileName::String)::String\nlibraylib.GetFileExtension(fileName::Cstring)::Cstring\n\nGet pointer to extension for a filename string (includes dot: '.png')\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetFileModTime-Tuple{String}","page":"Home","title":"Raylib.GetFileModTime","text":"GetFileModTime(fileName::String)\nlibraylib.GetFileModTime(fileName::Cstring)::Clong\n\nGet file modification time (last write time)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetFileName-Tuple{String}","page":"Home","title":"Raylib.GetFileName","text":"GetFileName(filePath::String)::String\nlibraylib.GetFileName(filePath::Cstring)::Cstring\n\nGet pointer to filename for a path string\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetFileNameWithoutExt-Tuple{String}","page":"Home","title":"Raylib.GetFileNameWithoutExt","text":"GetFileNameWithoutExt(filePath::String)::String\nlibraylib.GetFileNameWithoutExt(filePath::Cstring)::Cstring\n\nGet filename string without extension (uses static string)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetFontDefault-Tuple{}","page":"Home","title":"Raylib.GetFontDefault","text":"GetFontDefault()::RayFont\nlibraylib.GetFontDefault()::RayFont\n\nGet the default Font\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetFrameTime-Tuple{}","page":"Home","title":"Raylib.GetFrameTime","text":"GetFrameTime()\nlibraylib.GetFrameTime()::Cfloat\n\nGet time in seconds for last frame drawn (delta time)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGamepadAxisCount-Tuple{Integer}","page":"Home","title":"Raylib.GetGamepadAxisCount","text":"GetGamepadAxisCount(gamepad::Integer)\nlibraylib.GetGamepadAxisCount(gamepad::Cint)::Cint\n\nGet gamepad axis count for a gamepad\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGamepadAxisMovement-Tuple{Integer, Integer}","page":"Home","title":"Raylib.GetGamepadAxisMovement","text":"GetGamepadAxisMovement(gamepad::Integer, axis::Integer)\nlibraylib.GetGamepadAxisMovement(gamepad::Cint, axis::Cint)::Cfloat\n\nGet axis movement value for a gamepad axis\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGamepadButtonPressed-Tuple{}","page":"Home","title":"Raylib.GetGamepadButtonPressed","text":"GetGamepadButtonPressed()\nlibraylib.GetGamepadButtonPressed()::Cint\n\nGet the last gamepad button pressed\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGamepadName-Tuple{Integer}","page":"Home","title":"Raylib.GetGamepadName","text":"GetGamepadName(gamepad::Integer)::String\nlibraylib.GetGamepadName(gamepad::Cint)::Cstring\n\nGet gamepad internal name id\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGestureDetected-Tuple{}","page":"Home","title":"Raylib.GetGestureDetected","text":"GetGestureDetected()\nlibraylib.GetGestureDetected()::Cint\n\nGet latest detected gesture\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGestureDragAngle-Tuple{}","page":"Home","title":"Raylib.GetGestureDragAngle","text":"GetGestureDragAngle()\nlibraylib.GetGestureDragAngle()::Cfloat\n\nGet gesture drag angle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGestureDragVector-Tuple{}","page":"Home","title":"Raylib.GetGestureDragVector","text":"GetGestureDragVector()\nlibraylib.GetGestureDragVector()::NTuple{2, Cfloat}\n\nGet gesture drag vector\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGestureHoldDuration-Tuple{}","page":"Home","title":"Raylib.GetGestureHoldDuration","text":"GetGestureHoldDuration()\nlibraylib.GetGestureHoldDuration()::Cfloat\n\nGet gesture hold time in milliseconds\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGesturePinchAngle-Tuple{}","page":"Home","title":"Raylib.GetGesturePinchAngle","text":"GetGesturePinchAngle()\nlibraylib.GetGesturePinchAngle()::Cfloat\n\nGet gesture pinch angle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGesturePinchVector-Tuple{}","page":"Home","title":"Raylib.GetGesturePinchVector","text":"GetGesturePinchVector()\nlibraylib.GetGesturePinchVector()::NTuple{2, Cfloat}\n\nGet gesture pinch delta\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGlyphAtlasRec-Tuple{Raylib.RayFont, Integer}","page":"Home","title":"Raylib.GetGlyphAtlasRec","text":"GetGlyphAtlasRec(font::RayFont, codepoint::Integer)::RayRectangle\nlibraylib.GetGlyphAtlasRec(font::RayFont, codepoint::Cint)::RayRectangle\n\nGet glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGlyphIndex-Tuple{Raylib.RayFont, Integer}","page":"Home","title":"Raylib.GetGlyphIndex","text":"GetGlyphIndex(font::RayFont, codepoint::Integer)\nlibraylib.GetGlyphIndex(font::RayFont, codepoint::Cint)::Cint\n\nGet glyph index position in font for a codepoint (unicode character), fallback to '?' if not found\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetGlyphInfo-Tuple{Raylib.RayFont, Integer}","page":"Home","title":"Raylib.GetGlyphInfo","text":"GetGlyphInfo(font::RayFont, codepoint::Integer)::RayGlyphInfo\nlibraylib.GetGlyphInfo(font::RayFont, codepoint::Cint)::RayGlyphInfo\n\nGet glyph font info data for a codepoint (unicode character), fallback to '?' if not found\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetImageAlphaBorder-Tuple{Raylib.RayImage, Real}","page":"Home","title":"Raylib.GetImageAlphaBorder","text":"GetImageAlphaBorder(image::RayImage, threshold::Real)::RayRectangle\nlibraylib.GetImageAlphaBorder(image::RayImage, threshold::Cfloat)::RayRectangle\n\nGet image alpha border rectangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetImageColor-Tuple{Raylib.RayImage, Integer, Integer}","page":"Home","title":"Raylib.GetImageColor","text":"GetImageColor(image::RayImage, x::Integer, y::Integer)::RayColor\nlibraylib.GetImageColor(image::RayImage, x::Cint, y::Cint)::RayColor\n\nGet image pixel color at (x, y) position\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetKeyPressed-Tuple{}","page":"Home","title":"Raylib.GetKeyPressed","text":"GetKeyPressed()\nlibraylib.GetKeyPressed()::Cint\n\nGet key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMeshBoundingBox-Tuple{Raylib.RayMesh}","page":"Home","title":"Raylib.GetMeshBoundingBox","text":"GetMeshBoundingBox(mesh::RayMesh)::RayBoundingBox\nlibraylib.GetMeshBoundingBox(mesh::RayMesh)::RayBoundingBox\n\nCompute mesh bounding box limits\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetModelBoundingBox-Tuple{Raylib.RayModel}","page":"Home","title":"Raylib.GetModelBoundingBox","text":"GetModelBoundingBox(model::RayModel)::RayBoundingBox\nlibraylib.GetModelBoundingBox(model::RayModel)::RayBoundingBox\n\nCompute model bounding box limits (considers all meshes)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMonitorCount-Tuple{}","page":"Home","title":"Raylib.GetMonitorCount","text":"GetMonitorCount()\nlibraylib.GetMonitorCount()::Cint\n\nGet number of connected monitors\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMonitorHeight-Tuple{Integer}","page":"Home","title":"Raylib.GetMonitorHeight","text":"GetMonitorHeight(monitor::Integer)\nlibraylib.GetMonitorHeight(monitor::Cint)::Cint\n\nGet specified monitor height (max available by monitor)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMonitorName-Tuple{Integer}","page":"Home","title":"Raylib.GetMonitorName","text":"GetMonitorName(monitor::Integer)::String\nlibraylib.GetMonitorName(monitor::Cint)::Cstring\n\nGet the human-readable, UTF-8 encoded name of the primary monitor\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMonitorPhysicalHeight-Tuple{Integer}","page":"Home","title":"Raylib.GetMonitorPhysicalHeight","text":"GetMonitorPhysicalHeight(monitor::Integer)\nlibraylib.GetMonitorPhysicalHeight(monitor::Cint)::Cint\n\nGet specified monitor physical height in millimetres\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMonitorPhysicalWidth-Tuple{Integer}","page":"Home","title":"Raylib.GetMonitorPhysicalWidth","text":"GetMonitorPhysicalWidth(monitor::Integer)\nlibraylib.GetMonitorPhysicalWidth(monitor::Cint)::Cint\n\nGet specified monitor physical width in millimetres\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMonitorPosition-Tuple{Integer}","page":"Home","title":"Raylib.GetMonitorPosition","text":"GetMonitorPosition(monitor::Integer)\nlibraylib.GetMonitorPosition(monitor::Cint)::NTuple{2, Cfloat}\n\nGet specified monitor position\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMonitorRefreshRate-Tuple{Integer}","page":"Home","title":"Raylib.GetMonitorRefreshRate","text":"GetMonitorRefreshRate(monitor::Integer)\nlibraylib.GetMonitorRefreshRate(monitor::Cint)::Cint\n\nGet specified monitor refresh rate\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMonitorWidth-Tuple{Integer}","page":"Home","title":"Raylib.GetMonitorWidth","text":"GetMonitorWidth(monitor::Integer)\nlibraylib.GetMonitorWidth(monitor::Cint)::Cint\n\nGet specified monitor width (max available by monitor)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMouseDelta-Tuple{}","page":"Home","title":"Raylib.GetMouseDelta","text":"GetMouseDelta()\nlibraylib.GetMouseDelta()::NTuple{2, Cfloat}\n\nGet mouse delta between frames\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMousePosition-Tuple{}","page":"Home","title":"Raylib.GetMousePosition","text":"GetMousePosition()\nlibraylib.GetMousePosition()::NTuple{2, Cfloat}\n\nGet mouse position XY\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMouseRay-Tuple{Tuple{Float32, Float32}, Raylib.RayCamera3D}","page":"Home","title":"Raylib.GetMouseRay","text":"GetMouseRay(mousePosition::RayVector2, camera::RayCamera3D)::Ray\nlibraylib.GetMouseRay(mousePosition::NTuple{2, Cfloat}, camera::RayCamera3D)::Ray\n\nGet a ray trace from mouse position\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMouseWheelMove-Tuple{}","page":"Home","title":"Raylib.GetMouseWheelMove","text":"GetMouseWheelMove()\nlibraylib.GetMouseWheelMove()::Cfloat\n\nGet mouse wheel movement Y\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMouseX-Tuple{}","page":"Home","title":"Raylib.GetMouseX","text":"GetMouseX()\nlibraylib.GetMouseX()::Cint\n\nGet mouse position X\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMouseY-Tuple{}","page":"Home","title":"Raylib.GetMouseY","text":"GetMouseY()\nlibraylib.GetMouseY()::Cint\n\nGet mouse position Y\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMusicTimeLength-Tuple{Raylib.RayMusic}","page":"Home","title":"Raylib.GetMusicTimeLength","text":"GetMusicTimeLength(music::RayMusic)\nlibraylib.GetMusicTimeLength(music::RayMusic)::Cfloat\n\nGet music time length (in seconds)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetMusicTimePlayed-Tuple{Raylib.RayMusic}","page":"Home","title":"Raylib.GetMusicTimePlayed","text":"GetMusicTimePlayed(music::RayMusic)\nlibraylib.GetMusicTimePlayed(music::RayMusic)::Cfloat\n\nGet current music time played (in seconds)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetPixelColor-Tuple{Ref{Nothing}, Integer}","page":"Home","title":"Raylib.GetPixelColor","text":"GetPixelColor(srcPtr::Ref{Nothing}, format::Integer)::RayColor\nlibraylib.GetPixelColor(srcPtr::Ref{Cvoid}, format::Cint)::RayColor\n\nGet Color from a source pixel pointer of certain format\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetPixelDataSize-Tuple{Integer, Integer, Integer}","page":"Home","title":"Raylib.GetPixelDataSize","text":"GetPixelDataSize(width::Integer, height::Integer, format::Integer)\nlibraylib.GetPixelDataSize(width::Cint, height::Cint, format::Cint)::Cint\n\nGet pixel data size in bytes for certain format\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetPrevDirectoryPath-Tuple{String}","page":"Home","title":"Raylib.GetPrevDirectoryPath","text":"GetPrevDirectoryPath(dirPath::String)::String\nlibraylib.GetPrevDirectoryPath(dirPath::Cstring)::Cstring\n\nGet previous directory path for a given path (uses static string)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetRandomValue-Tuple{Integer, Integer}","page":"Home","title":"Raylib.GetRandomValue","text":"GetRandomValue(min::Integer, max::Integer)\nlibraylib.GetRandomValue(min::Cint, max::Cint)::Cint\n\nGet a random value between min and max (both included)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetRayCollisionBox-Tuple{Raylib.Ray, Raylib.RayBoundingBox}","page":"Home","title":"Raylib.GetRayCollisionBox","text":"GetRayCollisionBox(ray::Ray, box::RayBoundingBox)::RayCollision\nlibraylib.GetRayCollisionBox(ray::Ray, box::RayBoundingBox)::RayCollision\n\nGet collision info between ray and box\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetRayCollisionMesh-Tuple{Raylib.Ray, Raylib.RayMesh, NTuple{16, Float32}}","page":"Home","title":"Raylib.GetRayCollisionMesh","text":"GetRayCollisionMesh(ray::Ray, mesh::RayMesh, transform::RayMatrix)::RayCollision\nlibraylib.GetRayCollisionMesh(ray::Ray, mesh::RayMesh, transform::NTuple{16, Cfloat})::RayCollision\n\nGet collision info between ray and mesh\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetRayCollisionModel-Tuple{Raylib.Ray, Raylib.RayModel}","page":"Home","title":"Raylib.GetRayCollisionModel","text":"GetRayCollisionModel(ray::Ray, model::RayModel)::RayCollision\nlibraylib.GetRayCollisionModel(ray::Ray, model::RayModel)::RayCollision\n\nGet collision info between ray and model\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetRayCollisionQuad-Tuple{Raylib.Ray, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}}","page":"Home","title":"Raylib.GetRayCollisionQuad","text":"GetRayCollisionQuad(ray::Ray, p1::RayVector3, p2::RayVector3, p3::RayVector3, p4::RayVector3)::RayCollision\nlibraylib.GetRayCollisionQuad(ray::Ray, p1::NTuple{3, Cfloat}, p2::NTuple{3, Cfloat}, p3::NTuple{3, Cfloat}, p4::NTuple{3, Cfloat})::RayCollision\n\nGet collision info between ray and quad\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetRayCollisionSphere-Tuple{Raylib.Ray, Tuple{Float32, Float32, Float32}, Real}","page":"Home","title":"Raylib.GetRayCollisionSphere","text":"GetRayCollisionSphere(ray::Ray, center::RayVector3, radius::Real)::RayCollision\nlibraylib.GetRayCollisionSphere(ray::Ray, center::NTuple{3, Cfloat}, radius::Cfloat)::RayCollision\n\nGet collision info between ray and sphere\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetRayCollisionTriangle-Tuple{Raylib.Ray, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}, Tuple{Float32, Float32, Float32}}","page":"Home","title":"Raylib.GetRayCollisionTriangle","text":"GetRayCollisionTriangle(ray::Ray, p1::RayVector3, p2::RayVector3, p3::RayVector3)::RayCollision\nlibraylib.GetRayCollisionTriangle(ray::Ray, p1::NTuple{3, Cfloat}, p2::NTuple{3, Cfloat}, p3::NTuple{3, Cfloat})::RayCollision\n\nGet collision info between ray and triangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetScreenHeight-Tuple{}","page":"Home","title":"Raylib.GetScreenHeight","text":"GetScreenHeight()\nlibraylib.GetScreenHeight()::Cint\n\nGet current screen height\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetScreenToWorld2D-Tuple{Tuple{Float32, Float32}, Raylib.RayCamera2D}","page":"Home","title":"Raylib.GetScreenToWorld2D","text":"GetScreenToWorld2D(position::RayVector2, camera::RayCamera2D)\nlibraylib.GetScreenToWorld2D(position::NTuple{2, Cfloat}, camera::RayCamera2D)::NTuple{2, Cfloat}\n\nGet the world space position for a 2d camera screen space position\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetScreenWidth-Tuple{}","page":"Home","title":"Raylib.GetScreenWidth","text":"GetScreenWidth()\nlibraylib.GetScreenWidth()::Cint\n\nGet current screen width\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetShaderLocation-Tuple{Raylib.RayShader, String}","page":"Home","title":"Raylib.GetShaderLocation","text":"GetShaderLocation(shader::RayShader, uniformName::String)\nlibraylib.GetShaderLocation(shader::RayShader, uniformName::Cstring)::Cint\n\nGet shader uniform location\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetShaderLocationAttrib-Tuple{Raylib.RayShader, String}","page":"Home","title":"Raylib.GetShaderLocationAttrib","text":"GetShaderLocationAttrib(shader::RayShader, attribName::String)\nlibraylib.GetShaderLocationAttrib(shader::RayShader, attribName::Cstring)::Cint\n\nGet shader attribute location\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetSoundsPlaying-Tuple{}","page":"Home","title":"Raylib.GetSoundsPlaying","text":"GetSoundsPlaying()\nlibraylib.GetSoundsPlaying()::Cint\n\nGet number of sounds playing in the multichannel\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetTime-Tuple{}","page":"Home","title":"Raylib.GetTime","text":"GetTime()\nlibraylib.GetTime()::Cdouble\n\nGet elapsed time in seconds since InitWindow()\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetTouchPointCount-Tuple{}","page":"Home","title":"Raylib.GetTouchPointCount","text":"GetTouchPointCount()\nlibraylib.GetTouchPointCount()::Cint\n\nGet number of touch points\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetTouchPointId-Tuple{Integer}","page":"Home","title":"Raylib.GetTouchPointId","text":"GetTouchPointId(index::Integer)\nlibraylib.GetTouchPointId(index::Cint)::Cint\n\nGet touch point identifier for given index\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetTouchPosition-Tuple{Integer}","page":"Home","title":"Raylib.GetTouchPosition","text":"GetTouchPosition(index::Integer)\nlibraylib.GetTouchPosition(index::Cint)::NTuple{2, Cfloat}\n\nGet touch position XY for a touch point index (relative to screen size)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetTouchX-Tuple{}","page":"Home","title":"Raylib.GetTouchX","text":"GetTouchX()\nlibraylib.GetTouchX()::Cint\n\nGet touch position X for touch point 0 (relative to screen size)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetTouchY-Tuple{}","page":"Home","title":"Raylib.GetTouchY","text":"GetTouchY()\nlibraylib.GetTouchY()::Cint\n\nGet touch position Y for touch point 0 (relative to screen size)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetWindowHandle-Tuple{}","page":"Home","title":"Raylib.GetWindowHandle","text":"GetWindowHandle()::Ref{Nothing}\nlibraylib.GetWindowHandle()::Ptr{Cvoid}\n\nGet native window handle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetWindowPosition-Tuple{}","page":"Home","title":"Raylib.GetWindowPosition","text":"GetWindowPosition()\nlibraylib.GetWindowPosition()::NTuple{2, Cfloat}\n\nGet window position XY on monitor\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetWindowScaleDPI-Tuple{}","page":"Home","title":"Raylib.GetWindowScaleDPI","text":"GetWindowScaleDPI()\nlibraylib.GetWindowScaleDPI()::NTuple{2, Cfloat}\n\nGet window scale DPI factor\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetWorkingDirectory-Tuple{}","page":"Home","title":"Raylib.GetWorkingDirectory","text":"GetWorkingDirectory()::String\nlibraylib.GetWorkingDirectory()::Cstring\n\nGet current working directory (uses static string)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetWorldToScreen-Tuple{Tuple{Float32, Float32, Float32}, Raylib.RayCamera3D}","page":"Home","title":"Raylib.GetWorldToScreen","text":"GetWorldToScreen(position::RayVector3, camera::RayCamera3D)\nlibraylib.GetWorldToScreen(position::NTuple{3, Cfloat}, camera::RayCamera3D)::NTuple{2, Cfloat}\n\nGet the screen space position for a 3d world space position\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetWorldToScreen2D-Tuple{Tuple{Float32, Float32}, Raylib.RayCamera2D}","page":"Home","title":"Raylib.GetWorldToScreen2D","text":"GetWorldToScreen2D(position::RayVector2, camera::RayCamera2D)\nlibraylib.GetWorldToScreen2D(position::NTuple{2, Cfloat}, camera::RayCamera2D)::NTuple{2, Cfloat}\n\nGet the screen space position for a 2d camera world space position\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.GetWorldToScreenEx-Tuple{Tuple{Float32, Float32, Float32}, Raylib.RayCamera3D, Integer, Integer}","page":"Home","title":"Raylib.GetWorldToScreenEx","text":"GetWorldToScreenEx(position::RayVector3, camera::RayCamera3D, width::Integer, height::Integer)\nlibraylib.GetWorldToScreenEx(position::NTuple{3, Cfloat}, camera::RayCamera3D, width::Cint, height::Cint)::NTuple{2, Cfloat}\n\nGet size position for a 3d world space position\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.HideCursor-Tuple{}","page":"Home","title":"Raylib.HideCursor","text":"HideCursor()\nlibraylib.HideCursor()::Cvoid\n\nHides cursor\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageAlphaClear-Tuple{Ref{Raylib.RayImage}, ColorTypes.RGBA{FixedPointNumbers.N0f8}, Real}","page":"Home","title":"Raylib.ImageAlphaClear","text":"ImageAlphaClear(image::Ref{RayImage}, color::RayColor, threshold::Real)\nlibraylib.ImageAlphaClear(image::Ref{RayImage}, color::RayColor, threshold::Cfloat)::Cvoid\n\nClear alpha channel to desired color\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageAlphaCrop-Tuple{Ref{Raylib.RayImage}, Real}","page":"Home","title":"Raylib.ImageAlphaCrop","text":"ImageAlphaCrop(image::Ref{RayImage}, threshold::Real)\nlibraylib.ImageAlphaCrop(image::Ref{RayImage}, threshold::Cfloat)::Cvoid\n\nCrop image depending on alpha value\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageAlphaMask-Tuple{Ref{Raylib.RayImage}, Raylib.RayImage}","page":"Home","title":"Raylib.ImageAlphaMask","text":"ImageAlphaMask(image::Ref{RayImage}, alphaMask::RayImage)\nlibraylib.ImageAlphaMask(image::Ref{RayImage}, alphaMask::RayImage)::Cvoid\n\nApply alpha mask to image\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageAlphaPremultiply-Tuple{Ref{Raylib.RayImage}}","page":"Home","title":"Raylib.ImageAlphaPremultiply","text":"ImageAlphaPremultiply(image::Ref{RayImage})\nlibraylib.ImageAlphaPremultiply(image::Ref{RayImage})::Cvoid\n\nPremultiply alpha channel\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageClearBackground-Tuple{Ref{Raylib.RayImage}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageClearBackground","text":"ImageClearBackground(dst::Ref{RayImage}, color::RayColor)\nlibraylib.ImageClearBackground(dst::Ref{RayImage}, color::RayColor)::Cvoid\n\nClear image background with given color\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageColorBrightness-Tuple{Ref{Raylib.RayImage}, Integer}","page":"Home","title":"Raylib.ImageColorBrightness","text":"ImageColorBrightness(image::Ref{RayImage}, brightness::Integer)\nlibraylib.ImageColorBrightness(image::Ref{RayImage}, brightness::Cint)::Cvoid\n\nModify image color: brightness (-255 to 255)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageColorContrast-Tuple{Ref{Raylib.RayImage}, Real}","page":"Home","title":"Raylib.ImageColorContrast","text":"ImageColorContrast(image::Ref{RayImage}, contrast::Real)\nlibraylib.ImageColorContrast(image::Ref{RayImage}, contrast::Cfloat)::Cvoid\n\nModify image color: contrast (-100 to 100)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageColorGrayscale-Tuple{Ref{Raylib.RayImage}}","page":"Home","title":"Raylib.ImageColorGrayscale","text":"ImageColorGrayscale(image::Ref{RayImage})\nlibraylib.ImageColorGrayscale(image::Ref{RayImage})::Cvoid\n\nModify image color: grayscale\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageColorInvert-Tuple{Ref{Raylib.RayImage}}","page":"Home","title":"Raylib.ImageColorInvert","text":"ImageColorInvert(image::Ref{RayImage})\nlibraylib.ImageColorInvert(image::Ref{RayImage})::Cvoid\n\nModify image color: invert\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageColorReplace-Tuple{Ref{Raylib.RayImage}, ColorTypes.RGBA{FixedPointNumbers.N0f8}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageColorReplace","text":"ImageColorReplace(image::Ref{RayImage}, color::RayColor, replace::RayColor)\nlibraylib.ImageColorReplace(image::Ref{RayImage}, color::RayColor, replace::RayColor)::Cvoid\n\nModify image color: replace color\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageColorTint-Tuple{Ref{Raylib.RayImage}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageColorTint","text":"ImageColorTint(image::Ref{RayImage}, color::RayColor)\nlibraylib.ImageColorTint(image::Ref{RayImage}, color::RayColor)::Cvoid\n\nModify image color: tint\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageCopy-Tuple{Raylib.RayImage}","page":"Home","title":"Raylib.ImageCopy","text":"ImageCopy(image::RayImage)::RayImage\nlibraylib.ImageCopy(image::RayImage)::RayImage\n\nCreate an image duplicate (useful for transformations)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageCrop-Tuple{Ref{Raylib.RayImage}, Raylib.RayRectangle}","page":"Home","title":"Raylib.ImageCrop","text":"ImageCrop(image::Ref{RayImage}, crop::RayRectangle)\nlibraylib.ImageCrop(image::Ref{RayImage}, crop::RayRectangle)::Cvoid\n\nCrop an image to a defined rectangle\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDither-Tuple{Ref{Raylib.RayImage}, Integer, Integer, Integer, Integer}","page":"Home","title":"Raylib.ImageDither","text":"ImageDither(image::Ref{RayImage}, rBpp::Integer, gBpp::Integer, bBpp::Integer, aBpp::Integer)\nlibraylib.ImageDither(image::Ref{RayImage}, rBpp::Cint, gBpp::Cint, bBpp::Cint, aBpp::Cint)::Cvoid\n\nDither image data to 16bpp or lower (Floyd-Steinberg dithering)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDraw-Tuple{Ref{Raylib.RayImage}, Raylib.RayImage, Raylib.RayRectangle, Raylib.RayRectangle, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDraw","text":"ImageDraw(dst::Ref{RayImage}, src::RayImage, srcRec::RayRectangle, dstRec::RayRectangle, tint::RayColor)\nlibraylib.ImageDraw(dst::Ref{RayImage}, src::RayImage, srcRec::RayRectangle, dstRec::RayRectangle, tint::RayColor)::Cvoid\n\nDraw a source image within a destination image (tint applied to source)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawCircle-Tuple{Ref{Raylib.RayImage}, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawCircle","text":"ImageDrawCircle(dst::Ref{RayImage}, centerX::Integer, centerY::Integer, radius::Integer, color::RayColor)\nlibraylib.ImageDrawCircle(dst::Ref{RayImage}, centerX::Cint, centerY::Cint, radius::Cint, color::RayColor)::Cvoid\n\nDraw circle within an image\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawCircleV-Tuple{Ref{Raylib.RayImage}, Tuple{Float32, Float32}, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawCircleV","text":"ImageDrawCircleV(dst::Ref{RayImage}, center::RayVector2, radius::Integer, color::RayColor)\nlibraylib.ImageDrawCircleV(dst::Ref{RayImage}, center::NTuple{2, Cfloat}, radius::Cint, color::RayColor)::Cvoid\n\nDraw circle within an image (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawLine-Tuple{Ref{Raylib.RayImage}, Integer, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawLine","text":"ImageDrawLine(dst::Ref{RayImage}, startPosX::Integer, startPosY::Integer, endPosX::Integer, endPosY::Integer, color::RayColor)\nlibraylib.ImageDrawLine(dst::Ref{RayImage}, startPosX::Cint, startPosY::Cint, endPosX::Cint, endPosY::Cint, color::RayColor)::Cvoid\n\nDraw line within an image\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawLineV-Tuple{Ref{Raylib.RayImage}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawLineV","text":"ImageDrawLineV(dst::Ref{RayImage}, start::RayVector2, end::RayVector2, color::RayColor)\nlibraylib.ImageDrawLineV(dst::Ref{RayImage}, start::NTuple{2, Cfloat}, end::NTuple{2, Cfloat}, color::RayColor)::Cvoid\n\nDraw line within an image (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawPixel-Tuple{Ref{Raylib.RayImage}, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawPixel","text":"ImageDrawPixel(dst::Ref{RayImage}, posX::Integer, posY::Integer, color::RayColor)\nlibraylib.ImageDrawPixel(dst::Ref{RayImage}, posX::Cint, posY::Cint, color::RayColor)::Cvoid\n\nDraw pixel within an image\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawPixelV-Tuple{Ref{Raylib.RayImage}, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawPixelV","text":"ImageDrawPixelV(dst::Ref{RayImage}, position::RayVector2, color::RayColor)\nlibraylib.ImageDrawPixelV(dst::Ref{RayImage}, position::NTuple{2, Cfloat}, color::RayColor)::Cvoid\n\nDraw pixel within an image (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawRectangle-Tuple{Ref{Raylib.RayImage}, Integer, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawRectangle","text":"ImageDrawRectangle(dst::Ref{RayImage}, posX::Integer, posY::Integer, width::Integer, height::Integer, color::RayColor)\nlibraylib.ImageDrawRectangle(dst::Ref{RayImage}, posX::Cint, posY::Cint, width::Cint, height::Cint, color::RayColor)::Cvoid\n\nDraw rectangle within an image\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawRectangleLines-Tuple{Ref{Raylib.RayImage}, Raylib.RayRectangle, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawRectangleLines","text":"ImageDrawRectangleLines(dst::Ref{RayImage}, rec::RayRectangle, thick::Integer, color::RayColor)\nlibraylib.ImageDrawRectangleLines(dst::Ref{RayImage}, rec::RayRectangle, thick::Cint, color::RayColor)::Cvoid\n\nDraw rectangle lines within an image\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawRectangleRec-Tuple{Ref{Raylib.RayImage}, Raylib.RayRectangle, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawRectangleRec","text":"ImageDrawRectangleRec(dst::Ref{RayImage}, rec::RayRectangle, color::RayColor)\nlibraylib.ImageDrawRectangleRec(dst::Ref{RayImage}, rec::RayRectangle, color::RayColor)::Cvoid\n\nDraw rectangle within an image\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawRectangleV-Tuple{Ref{Raylib.RayImage}, Tuple{Float32, Float32}, Tuple{Float32, Float32}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawRectangleV","text":"ImageDrawRectangleV(dst::Ref{RayImage}, position::RayVector2, size::RayVector2, color::RayColor)\nlibraylib.ImageDrawRectangleV(dst::Ref{RayImage}, position::NTuple{2, Cfloat}, size::NTuple{2, Cfloat}, color::RayColor)::Cvoid\n\nDraw rectangle within an image (Vector version)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawText-Tuple{Ref{Raylib.RayImage}, String, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawText","text":"ImageDrawText(dst::Ref{RayImage}, text::String, posX::Integer, posY::Integer, fontSize::Integer, color::RayColor)\nlibraylib.ImageDrawText(dst::Ref{RayImage}, text::Cstring, posX::Cint, posY::Cint, fontSize::Cint, color::RayColor)::Cvoid\n\nDraw text (using default font) within an image (destination)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageDrawTextEx-Tuple{Ref{Raylib.RayImage}, Raylib.RayFont, String, Tuple{Float32, Float32}, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageDrawTextEx","text":"ImageDrawTextEx(dst::Ref{RayImage}, font::RayFont, text::String, position::RayVector2, fontSize::Real, spacing::Real, tint::RayColor)\nlibraylib.ImageDrawTextEx(dst::Ref{RayImage}, font::RayFont, text::Cstring, position::NTuple{2, Cfloat}, fontSize::Cfloat, spacing::Cfloat, tint::RayColor)::Cvoid\n\nDraw text (custom sprite font) within an image (destination)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageFlipHorizontal-Tuple{Ref{Raylib.RayImage}}","page":"Home","title":"Raylib.ImageFlipHorizontal","text":"ImageFlipHorizontal(image::Ref{RayImage})\nlibraylib.ImageFlipHorizontal(image::Ref{RayImage})::Cvoid\n\nFlip image horizontally\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageFlipVertical-Tuple{Ref{Raylib.RayImage}}","page":"Home","title":"Raylib.ImageFlipVertical","text":"ImageFlipVertical(image::Ref{RayImage})\nlibraylib.ImageFlipVertical(image::Ref{RayImage})::Cvoid\n\nFlip image vertically\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageFormat-Tuple{Ref{Raylib.RayImage}, Integer}","page":"Home","title":"Raylib.ImageFormat","text":"ImageFormat(image::Ref{RayImage}, newFormat::Integer)\nlibraylib.ImageFormat(image::Ref{RayImage}, newFormat::Cint)::Cvoid\n\nConvert image data to desired format\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageFromImage-Tuple{Raylib.RayImage, Raylib.RayRectangle}","page":"Home","title":"Raylib.ImageFromImage","text":"ImageFromImage(image::RayImage, rec::RayRectangle)::RayImage\nlibraylib.ImageFromImage(image::RayImage, rec::RayRectangle)::RayImage\n\nCreate an image from another image piece\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageMipmaps-Tuple{Ref{Raylib.RayImage}}","page":"Home","title":"Raylib.ImageMipmaps","text":"ImageMipmaps(image::Ref{RayImage})\nlibraylib.ImageMipmaps(image::Ref{RayImage})::Cvoid\n\nGenerate all mipmap levels for a provided image\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageResize-Tuple{Ref{Raylib.RayImage}, Integer, Integer}","page":"Home","title":"Raylib.ImageResize","text":"ImageResize(image::Ref{RayImage}, newWidth::Integer, newHeight::Integer)\nlibraylib.ImageResize(image::Ref{RayImage}, newWidth::Cint, newHeight::Cint)::Cvoid\n\nResize image (Bicubic scaling algorithm)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageResizeCanvas-Tuple{Ref{Raylib.RayImage}, Integer, Integer, Integer, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageResizeCanvas","text":"ImageResizeCanvas(image::Ref{RayImage}, newWidth::Integer, newHeight::Integer, offsetX::Integer, offsetY::Integer, fill::RayColor)\nlibraylib.ImageResizeCanvas(image::Ref{RayImage}, newWidth::Cint, newHeight::Cint, offsetX::Cint, offsetY::Cint, fill::RayColor)::Cvoid\n\nResize canvas and fill with color\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageResizeNN-Tuple{Ref{Raylib.RayImage}, Integer, Integer}","page":"Home","title":"Raylib.ImageResizeNN","text":"ImageResizeNN(image::Ref{RayImage}, newWidth::Integer, newHeight::Integer)\nlibraylib.ImageResizeNN(image::Ref{RayImage}, newWidth::Cint, newHeight::Cint)::Cvoid\n\nResize image (Nearest-Neighbor scaling algorithm)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageRotateCCW-Tuple{Ref{Raylib.RayImage}}","page":"Home","title":"Raylib.ImageRotateCCW","text":"ImageRotateCCW(image::Ref{RayImage})\nlibraylib.ImageRotateCCW(image::Ref{RayImage})::Cvoid\n\nRotate image counter-clockwise 90deg\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageRotateCW-Tuple{Ref{Raylib.RayImage}}","page":"Home","title":"Raylib.ImageRotateCW","text":"ImageRotateCW(image::Ref{RayImage})\nlibraylib.ImageRotateCW(image::Ref{RayImage})::Cvoid\n\nRotate image clockwise 90deg\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageText-Tuple{String, Integer, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageText","text":"ImageText(text::String, fontSize::Integer, color::RayColor)::RayImage\nlibraylib.ImageText(text::Cstring, fontSize::Cint, color::RayColor)::RayImage\n\nCreate an image from text (default font)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageTextEx-Tuple{Raylib.RayFont, String, Real, Real, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageTextEx","text":"ImageTextEx(font::RayFont, text::String, fontSize::Real, spacing::Real, tint::RayColor)::RayImage\nlibraylib.ImageTextEx(font::RayFont, text::Cstring, fontSize::Cfloat, spacing::Cfloat, tint::RayColor)::RayImage\n\nCreate an image from text (custom sprite font)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ImageToPOT-Tuple{Ref{Raylib.RayImage}, ColorTypes.RGBA{FixedPointNumbers.N0f8}}","page":"Home","title":"Raylib.ImageToPOT","text":"ImageToPOT(image::Ref{RayImage}, fill::RayColor)\nlibraylib.ImageToPOT(image::Ref{RayImage}, fill::RayColor)::Cvoid\n\nConvert image to POT (power-of-two)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.InitAudioDevice-Tuple{}","page":"Home","title":"Raylib.InitAudioDevice","text":"InitAudioDevice()\nlibraylib.InitAudioDevice()::Cvoid\n\nInitialize audio device and context\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.InitAudioStream-Tuple{Integer, Integer, Integer}","page":"Home","title":"Raylib.InitAudioStream","text":"InitAudioStream(sampleRate::Integer, sampleSize::Integer, channels::Integer)::RayAudioStream\nlibraylib.InitAudioStream(sampleRate::Cuint, sampleSize::Cuint, channels::Cuint)::RayAudioStream\n\nInit audio stream (to stream raw audio pcm data)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.InitWindow-Tuple{Integer, Integer, String}","page":"Home","title":"Raylib.InitWindow","text":"InitWindow(width::Integer, height::Integer, title::String)\nlibraylib.InitWindow(width::Cint, height::Cint, title::Cstring)::Cvoid\n\nInitialize window and OpenGL context\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsAudioDeviceReady-Tuple{}","page":"Home","title":"Raylib.IsAudioDeviceReady","text":"IsAudioDeviceReady()::Bool\nlibraylib.IsAudioDeviceReady()::Cuchar\n\nCheck if audio device has been initialized successfully\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsAudioStreamPlaying-Tuple{Raylib.RayAudioStream}","page":"Home","title":"Raylib.IsAudioStreamPlaying","text":"IsAudioStreamPlaying(stream::RayAudioStream)::Bool\nlibraylib.IsAudioStreamPlaying(stream::RayAudioStream)::Cuchar\n\nCheck if audio stream is playing\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsAudioStreamProcessed-Tuple{Raylib.RayAudioStream}","page":"Home","title":"Raylib.IsAudioStreamProcessed","text":"IsAudioStreamProcessed(stream::RayAudioStream)::Bool\nlibraylib.IsAudioStreamProcessed(stream::RayAudioStream)::Cuchar\n\nCheck if any audio stream buffers requires refill\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsCursorHidden-Tuple{}","page":"Home","title":"Raylib.IsCursorHidden","text":"IsCursorHidden()::Bool\nlibraylib.IsCursorHidden()::Cuchar\n\nCheck if cursor is not visible\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsCursorOnScreen-Tuple{}","page":"Home","title":"Raylib.IsCursorOnScreen","text":"IsCursorOnScreen()::Bool\nlibraylib.IsCursorOnScreen()::Cuchar\n\nCheck if cursor is on the screen\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsFileDropped-Tuple{}","page":"Home","title":"Raylib.IsFileDropped","text":"IsFileDropped()::Bool\nlibraylib.IsFileDropped()::Cuchar\n\nCheck if a file has been dropped into window\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsFileExtension-Tuple{String, String}","page":"Home","title":"Raylib.IsFileExtension","text":"IsFileExtension(fileName::String, ext::String)::Bool\nlibraylib.IsFileExtension(fileName::Cstring, ext::Cstring)::Cuchar\n\nCheck file extension (including point: .png, .wav)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsGamepadAvailable-Tuple{Integer}","page":"Home","title":"Raylib.IsGamepadAvailable","text":"IsGamepadAvailable(gamepad::Integer)::Bool\nlibraylib.IsGamepadAvailable(gamepad::Cint)::Cuchar\n\nCheck if a gamepad is available\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsGamepadButtonDown-Tuple{Integer, Integer}","page":"Home","title":"Raylib.IsGamepadButtonDown","text":"IsGamepadButtonDown(gamepad::Integer, button::Integer)::Bool\nlibraylib.IsGamepadButtonDown(gamepad::Cint, button::Cint)::Cuchar\n\nCheck if a gamepad button is being pressed\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsGamepadButtonPressed-Tuple{Integer, Integer}","page":"Home","title":"Raylib.IsGamepadButtonPressed","text":"IsGamepadButtonPressed(gamepad::Integer, button::Integer)::Bool\nlibraylib.IsGamepadButtonPressed(gamepad::Cint, button::Cint)::Cuchar\n\nCheck if a gamepad button has been pressed once\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsGamepadButtonReleased-Tuple{Integer, Integer}","page":"Home","title":"Raylib.IsGamepadButtonReleased","text":"IsGamepadButtonReleased(gamepad::Integer, button::Integer)::Bool\nlibraylib.IsGamepadButtonReleased(gamepad::Cint, button::Cint)::Cuchar\n\nCheck if a gamepad button has been released once\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsGamepadButtonUp-Tuple{Integer, Integer}","page":"Home","title":"Raylib.IsGamepadButtonUp","text":"IsGamepadButtonUp(gamepad::Integer, button::Integer)::Bool\nlibraylib.IsGamepadButtonUp(gamepad::Cint, button::Cint)::Cuchar\n\nCheck if a gamepad button is NOT being pressed\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsGestureDetected-Tuple{Integer}","page":"Home","title":"Raylib.IsGestureDetected","text":"IsGestureDetected(gesture::Integer)::Bool\nlibraylib.IsGestureDetected(gesture::Cint)::Cuchar\n\nCheck if a gesture have been detected\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsKeyDown-Tuple{Integer}","page":"Home","title":"Raylib.IsKeyDown","text":"IsKeyDown(key::Integer)::Bool\nlibraylib.IsKeyDown(key::Cint)::Cuchar\n\nCheck if a key is being pressed\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsKeyPressed-Tuple{Integer}","page":"Home","title":"Raylib.IsKeyPressed","text":"IsKeyPressed(key::Integer)::Bool\nlibraylib.IsKeyPressed(key::Cint)::Cuchar\n\nCheck if a key has been pressed once\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsKeyReleased-Tuple{Integer}","page":"Home","title":"Raylib.IsKeyReleased","text":"IsKeyReleased(key::Integer)::Bool\nlibraylib.IsKeyReleased(key::Cint)::Cuchar\n\nCheck if a key has been released once\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsKeyUp-Tuple{Integer}","page":"Home","title":"Raylib.IsKeyUp","text":"IsKeyUp(key::Integer)::Bool\nlibraylib.IsKeyUp(key::Cint)::Cuchar\n\nCheck if a key is NOT being pressed\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsModelAnimationValid-Tuple{Raylib.RayModel, Raylib.RayModelAnimation}","page":"Home","title":"Raylib.IsModelAnimationValid","text":"IsModelAnimationValid(model::RayModel, anim::RayModelAnimation)::Bool\nlibraylib.IsModelAnimationValid(model::RayModel, anim::RayModelAnimation)::Cuchar\n\nCheck model animation skeleton match\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsMouseButtonDown-Tuple{Integer}","page":"Home","title":"Raylib.IsMouseButtonDown","text":"IsMouseButtonDown(button::Integer)::Bool\nlibraylib.IsMouseButtonDown(button::Cint)::Cuchar\n\nCheck if a mouse button is being pressed\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsMouseButtonPressed-Tuple{Integer}","page":"Home","title":"Raylib.IsMouseButtonPressed","text":"IsMouseButtonPressed(button::Integer)::Bool\nlibraylib.IsMouseButtonPressed(button::Cint)::Cuchar\n\nCheck if a mouse button has been pressed once\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsMouseButtonReleased-Tuple{Integer}","page":"Home","title":"Raylib.IsMouseButtonReleased","text":"IsMouseButtonReleased(button::Integer)::Bool\nlibraylib.IsMouseButtonReleased(button::Cint)::Cuchar\n\nCheck if a mouse button has been released once\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsMouseButtonUp-Tuple{Integer}","page":"Home","title":"Raylib.IsMouseButtonUp","text":"IsMouseButtonUp(button::Integer)::Bool\nlibraylib.IsMouseButtonUp(button::Cint)::Cuchar\n\nCheck if a mouse button is NOT being pressed\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsMusicStreamPlaying-Tuple{Raylib.RayMusic}","page":"Home","title":"Raylib.IsMusicStreamPlaying","text":"IsMusicStreamPlaying(music::RayMusic)::Bool\nlibraylib.IsMusicStreamPlaying(music::RayMusic)::Cuchar\n\nCheck if music is playing\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsSoundPlaying-Tuple{Raylib.RaySound}","page":"Home","title":"Raylib.IsSoundPlaying","text":"IsSoundPlaying(sound::RaySound)::Bool\nlibraylib.IsSoundPlaying(sound::RaySound)::Cuchar\n\nCheck if a sound is currently playing\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsWindowFocused-Tuple{}","page":"Home","title":"Raylib.IsWindowFocused","text":"IsWindowFocused()::Bool\nlibraylib.IsWindowFocused()::Cuchar\n\nCheck if window is currently focused (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsWindowFullscreen-Tuple{}","page":"Home","title":"Raylib.IsWindowFullscreen","text":"IsWindowFullscreen()::Bool\nlibraylib.IsWindowFullscreen()::Cuchar\n\nCheck if window is currently fullscreen\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsWindowHidden-Tuple{}","page":"Home","title":"Raylib.IsWindowHidden","text":"IsWindowHidden()::Bool\nlibraylib.IsWindowHidden()::Cuchar\n\nCheck if window is currently hidden (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsWindowMaximized-Tuple{}","page":"Home","title":"Raylib.IsWindowMaximized","text":"IsWindowMaximized()::Bool\nlibraylib.IsWindowMaximized()::Cuchar\n\nCheck if window is currently maximized (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsWindowMinimized-Tuple{}","page":"Home","title":"Raylib.IsWindowMinimized","text":"IsWindowMinimized()::Bool\nlibraylib.IsWindowMinimized()::Cuchar\n\nCheck if window is currently minimized (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsWindowReady-Tuple{}","page":"Home","title":"Raylib.IsWindowReady","text":"IsWindowReady()::Bool\nlibraylib.IsWindowReady()::Cuchar\n\nCheck if window has been initialized successfully\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsWindowResized-Tuple{}","page":"Home","title":"Raylib.IsWindowResized","text":"IsWindowResized()::Bool\nlibraylib.IsWindowResized()::Cuchar\n\nCheck if window has been resized last frame\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.IsWindowState-Tuple{Integer}","page":"Home","title":"Raylib.IsWindowState","text":"IsWindowState(flag::Integer)::Bool\nlibraylib.IsWindowState(flag::Cuint)::Cuchar\n\nCheck if one specific window flag is enabled\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadCodepoints-Tuple{String, Ref{var\"#s355\"} where var\"#s355\"<:Integer}","page":"Home","title":"Raylib.LoadCodepoints","text":"LoadCodepoints(text::String, count::Ref{<:Integer})::Ref{<:Integer}\nlibraylib.LoadCodepoints(text::Cstring, count::Ref{Cint})::Ptr{Cint}\n\nLoad all codepoints from a UTF-8 text string, codepoints count returned by parameter\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadFileData-Tuple{String, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.LoadFileData","text":"LoadFileData(fileName::String, bytesRead::Ref{<:Integer})::Ref{UInt8}\nlibraylib.LoadFileData(fileName::Cstring, bytesRead::Ref{Cuint})::Ptr{Cuchar}\n\nLoad file data as byte array (read)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadFileText-Tuple{String}","page":"Home","title":"Raylib.LoadFileText","text":"LoadFileText(fileName::String)::String\nlibraylib.LoadFileText(fileName::Cstring)::Cstring\n\nLoad text data from file (read), returns a '\\0' terminated string\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadFont-Tuple{String}","page":"Home","title":"Raylib.LoadFont","text":"LoadFont(fileName::String)::RayFont\nlibraylib.LoadFont(fileName::Cstring)::RayFont\n\nLoad font from file into GPU memory (VRAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadFontData-Tuple{Ref{UInt8}, Integer, Integer, Ref{var\"#s356\"} where var\"#s356\"<:Integer, Integer, Integer}","page":"Home","title":"Raylib.LoadFontData","text":"LoadFontData(fileData::Ref{UInt8}, dataSize::Integer, fontSize::Integer, fontChars::Ref{<:Integer}, glyphCount::Integer, type::Integer)::Ref{RayGlyphInfo}\nlibraylib.LoadFontData(fileData::Ref{Cuchar}, dataSize::Cint, fontSize::Cint, fontChars::Ref{Cint}, glyphCount::Cint, type::Cint)::Ptr{RayGlyphInfo}\n\nLoad font data for further use\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadFontEx-Tuple{String, Integer, Ref{var\"#s356\"} where var\"#s356\"<:Integer, Integer}","page":"Home","title":"Raylib.LoadFontEx","text":"LoadFontEx(fileName::String, fontSize::Integer, fontChars::Ref{<:Integer}, glyphCount::Integer)::RayFont\nlibraylib.LoadFontEx(fileName::Cstring, fontSize::Cint, fontChars::Ref{Cint}, glyphCount::Cint)::RayFont\n\nLoad font from file with extended parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadFontFromImage-Tuple{Raylib.RayImage, ColorTypes.RGBA{FixedPointNumbers.N0f8}, Integer}","page":"Home","title":"Raylib.LoadFontFromImage","text":"LoadFontFromImage(image::RayImage, key::RayColor, firstChar::Integer)::RayFont\nlibraylib.LoadFontFromImage(image::RayImage, key::RayColor, firstChar::Cint)::RayFont\n\nLoad font from Image (XNA style)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadFontFromMemory-Tuple{String, Ref{UInt8}, Integer, Integer, Ref{var\"#s356\"} where var\"#s356\"<:Integer, Integer}","page":"Home","title":"Raylib.LoadFontFromMemory","text":"LoadFontFromMemory(fileType::String, fileData::Ref{UInt8}, dataSize::Integer, fontSize::Integer, fontChars::Ref{<:Integer}, glyphCount::Integer)::RayFont\nlibraylib.LoadFontFromMemory(fileType::Cstring, fileData::Ref{Cuchar}, dataSize::Cint, fontSize::Cint, fontChars::Ref{Cint}, glyphCount::Cint)::RayFont\n\nLoad font from memory buffer, fileType refers to extension: i.e. '.ttf'\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadImage-Tuple{String}","page":"Home","title":"Raylib.LoadImage","text":"LoadImage(fileName::String)::RayImage\nlibraylib.LoadImage(fileName::Cstring)::RayImage\n\nLoad image from file into CPU memory (RAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadImageAnim-Tuple{String, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.LoadImageAnim","text":"LoadImageAnim(fileName::String, frames::Ref{<:Integer})::RayImage\nlibraylib.LoadImageAnim(fileName::Cstring, frames::Ref{Cint})::RayImage\n\nLoad image sequence from file (frames appended to image.data)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadImageColors-Tuple{Raylib.RayImage}","page":"Home","title":"Raylib.LoadImageColors","text":"LoadImageColors(image::RayImage)::Ref{RayColor}\nlibraylib.LoadImageColors(image::RayImage)::Ptr{RayColor}\n\nLoad color data from image as a Color array (RGBA - 32bit)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadImageFromMemory-Tuple{String, Ref{UInt8}, Integer}","page":"Home","title":"Raylib.LoadImageFromMemory","text":"LoadImageFromMemory(fileType::String, fileData::Ref{UInt8}, dataSize::Integer)::RayImage\nlibraylib.LoadImageFromMemory(fileType::Cstring, fileData::Ref{Cuchar}, dataSize::Cint)::RayImage\n\nLoad image from memory buffer\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadImageFromScreen-Tuple{}","page":"Home","title":"Raylib.LoadImageFromScreen","text":"LoadImageFromScreen()::RayImage\nlibraylib.LoadImageFromScreen()::RayImage\n\nLoad image from screen buffer and (screenshot)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadImageFromTexture-Tuple{Raylib.RayTexture}","page":"Home","title":"Raylib.LoadImageFromTexture","text":"LoadImageFromTexture(texture::RayTexture)::RayImage\nlibraylib.LoadImageFromTexture(texture::RayTexture)::RayImage\n\nLoad image from GPU texture data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadImagePalette-Tuple{Raylib.RayImage, Integer, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.LoadImagePalette","text":"LoadImagePalette(image::RayImage, maxPaletteSize::Integer, colorsCount::Ref{<:Integer})::Ref{RayColor}\nlibraylib.LoadImagePalette(image::RayImage, maxPaletteSize::Cint, colorsCount::Ref{Cint})::Ptr{RayColor}\n\nLoad colors palette from image as a Color array (RGBA - 32bit)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadImageRaw-Tuple{String, Integer, Integer, Integer, Integer}","page":"Home","title":"Raylib.LoadImageRaw","text":"LoadImageRaw(fileName::String, width::Integer, height::Integer, format::Integer, headerSize::Integer)::RayImage\nlibraylib.LoadImageRaw(fileName::Cstring, width::Cint, height::Cint, format::Cint, headerSize::Cint)::RayImage\n\nLoad image from RAW file data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadMaterialDefault-Tuple{}","page":"Home","title":"Raylib.LoadMaterialDefault","text":"LoadMaterialDefault()::RayMaterial\nlibraylib.LoadMaterialDefault()::RayMaterial\n\nLoad default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadMaterials-Tuple{String, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.LoadMaterials","text":"LoadMaterials(fileName::String, materialCount::Ref{<:Integer})::Ref{RayMaterial}\nlibraylib.LoadMaterials(fileName::Cstring, materialCount::Ref{Cint})::Ptr{RayMaterial}\n\nLoad materials from model file\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadModel-Tuple{String}","page":"Home","title":"Raylib.LoadModel","text":"LoadModel(fileName::String)::RayModel\nlibraylib.LoadModel(fileName::Cstring)::RayModel\n\nLoad model from files (meshes and materials)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadModelAnimations-Tuple{String, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.LoadModelAnimations","text":"LoadModelAnimations(fileName::String, animCount::Ref{<:Integer})::Ref{RayModelAnimation}\nlibraylib.LoadModelAnimations(fileName::Cstring, animCount::Ref{Cuint})::Ptr{RayModelAnimation}\n\nLoad model animations from file\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadModelFromMesh-Tuple{Raylib.RayMesh}","page":"Home","title":"Raylib.LoadModelFromMesh","text":"LoadModelFromMesh(mesh::RayMesh)::RayModel\nlibraylib.LoadModelFromMesh(mesh::RayMesh)::RayModel\n\nLoad model from generated mesh (default material)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadMusicStream-Tuple{String}","page":"Home","title":"Raylib.LoadMusicStream","text":"LoadMusicStream(fileName::String)::RayMusic\nlibraylib.LoadMusicStream(fileName::Cstring)::RayMusic\n\nLoad music stream from file\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadMusicStreamFromMemory-Tuple{String, Ref{UInt8}, Integer}","page":"Home","title":"Raylib.LoadMusicStreamFromMemory","text":"LoadMusicStreamFromMemory(fileType::String, data::Ref{UInt8}, dataSize::Integer)::RayMusic\nlibraylib.LoadMusicStreamFromMemory(fileType::Cstring, data::Ref{Cuchar}, dataSize::Cint)::RayMusic\n\nLoad music stream from data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadRenderTexture-Tuple{Integer, Integer}","page":"Home","title":"Raylib.LoadRenderTexture","text":"LoadRenderTexture(width::Integer, height::Integer)::RayRenderTexture\nlibraylib.LoadRenderTexture(width::Cint, height::Cint)::RayRenderTexture\n\nLoad texture for rendering (framebuffer)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadShader-Tuple{String, String}","page":"Home","title":"Raylib.LoadShader","text":"LoadShader(vsFileName::String, fsFileName::String)::RayShader\nlibraylib.LoadShader(vsFileName::Cstring, fsFileName::Cstring)::RayShader\n\nLoad shader from files and bind default locations\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadShaderFromMemory-Tuple{String, String}","page":"Home","title":"Raylib.LoadShaderFromMemory","text":"LoadShaderFromMemory(vsCode::String, fsCode::String)::RayShader\nlibraylib.LoadShaderFromMemory(vsCode::Cstring, fsCode::Cstring)::RayShader\n\nLoad shader from code strings and bind default locations\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadSound-Tuple{String}","page":"Home","title":"Raylib.LoadSound","text":"LoadSound(fileName::String)::RaySound\nlibraylib.LoadSound(fileName::Cstring)::RaySound\n\nLoad sound from file\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadSoundFromWave-Tuple{Raylib.RayWave}","page":"Home","title":"Raylib.LoadSoundFromWave","text":"LoadSoundFromWave(wave::RayWave)::RaySound\nlibraylib.LoadSoundFromWave(wave::RayWave)::RaySound\n\nLoad sound from wave data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadStorageValue-Tuple{Integer}","page":"Home","title":"Raylib.LoadStorageValue","text":"LoadStorageValue(position::Integer)\nlibraylib.LoadStorageValue(position::Cuint)::Cint\n\nLoad integer value from storage file (from defined position)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadTexture-Tuple{String}","page":"Home","title":"Raylib.LoadTexture","text":"LoadTexture(fileName::String)::RayTexture\nlibraylib.LoadTexture(fileName::Cstring)::RayTexture\n\nLoad texture from file into GPU memory (VRAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadTextureCubemap-Tuple{Raylib.RayImage, Integer}","page":"Home","title":"Raylib.LoadTextureCubemap","text":"LoadTextureCubemap(image::RayImage, layout::Integer)::RayTexture\nlibraylib.LoadTextureCubemap(image::RayImage, layout::Cint)::RayTexture\n\nLoad cubemap from image, multiple image cubemap layouts supported\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadTextureFromImage-Tuple{Raylib.RayImage}","page":"Home","title":"Raylib.LoadTextureFromImage","text":"LoadTextureFromImage(image::RayImage)::RayTexture\nlibraylib.LoadTextureFromImage(image::RayImage)::RayTexture\n\nLoad texture from image data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadVrStereoConfig-Tuple{Raylib.RayVrDeviceInfo}","page":"Home","title":"Raylib.LoadVrStereoConfig","text":"LoadVrStereoConfig(device::RayVrDeviceInfo)::RayVrStereoConfig\nlibraylib.LoadVrStereoConfig(device::RayVrDeviceInfo)::RayVrStereoConfig\n\nLoad VR stereo config for VR simulator device parameters\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadWave-Tuple{String}","page":"Home","title":"Raylib.LoadWave","text":"LoadWave(fileName::String)::RayWave\nlibraylib.LoadWave(fileName::Cstring)::RayWave\n\nLoad wave data from file\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadWaveFromMemory-Tuple{String, Ref{UInt8}, Integer}","page":"Home","title":"Raylib.LoadWaveFromMemory","text":"LoadWaveFromMemory(fileType::String, fileData::Ref{UInt8}, dataSize::Integer)::RayWave\nlibraylib.LoadWaveFromMemory(fileType::Cstring, fileData::Ref{Cuchar}, dataSize::Cint)::RayWave\n\nLoad wave from memory buffer\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.LoadWaveSamples-Tuple{Raylib.RayWave}","page":"Home","title":"Raylib.LoadWaveSamples","text":"LoadWaveSamples(wave::RayWave)::Ref{<:Real}\nlibraylib.LoadWaveSamples(wave::RayWave)::Ptr{Cfloat}\n\nLoad samples data from wave as a floats array\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.MaximizeWindow-Tuple{}","page":"Home","title":"Raylib.MaximizeWindow","text":"MaximizeWindow()\nlibraylib.MaximizeWindow()::Cvoid\n\nSet window state: maximized, if resizable (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.MeasureText-Tuple{String, Integer}","page":"Home","title":"Raylib.MeasureText","text":"MeasureText(text::String, fontSize::Integer)\nlibraylib.MeasureText(text::Cstring, fontSize::Cint)::Cint\n\nMeasure string width for default font\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.MeasureTextEx-Tuple{Raylib.RayFont, String, Real, Real}","page":"Home","title":"Raylib.MeasureTextEx","text":"MeasureTextEx(font::RayFont, text::String, fontSize::Real, spacing::Real)\nlibraylib.MeasureTextEx(font::RayFont, text::Cstring, fontSize::Cfloat, spacing::Cfloat)::NTuple{2, Cfloat}\n\nMeasure string size for Font\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.MemAlloc-Tuple{Integer}","page":"Home","title":"Raylib.MemAlloc","text":"MemAlloc(size::Integer)::Ref{Nothing}\nlibraylib.MemAlloc(size::Cint)::Ptr{Cvoid}\n\nInternal memory allocator\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.MemFree-Tuple{Ref{Nothing}}","page":"Home","title":"Raylib.MemFree","text":"MemFree(ptr::Ref{Nothing})\nlibraylib.MemFree(ptr::Ref{Cvoid})::Cvoid\n\nInternal memory free\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.MemRealloc-Tuple{Ref{Nothing}, Integer}","page":"Home","title":"Raylib.MemRealloc","text":"MemRealloc(ptr::Ref{Nothing}, size::Integer)::Ref{Nothing}\nlibraylib.MemRealloc(ptr::Ref{Cvoid}, size::Cint)::Ptr{Cvoid}\n\nInternal memory reallocator\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.MinimizeWindow-Tuple{}","page":"Home","title":"Raylib.MinimizeWindow","text":"MinimizeWindow()\nlibraylib.MinimizeWindow()::Cvoid\n\nSet window state: minimized, if resizable (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.OpenURL-Tuple{String}","page":"Home","title":"Raylib.OpenURL","text":"OpenURL(url::String)\nlibraylib.OpenURL(url::Cstring)::Cvoid\n\nOpen URL with default system browser (if available)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.PauseAudioStream-Tuple{Raylib.RayAudioStream}","page":"Home","title":"Raylib.PauseAudioStream","text":"PauseAudioStream(stream::RayAudioStream)\nlibraylib.PauseAudioStream(stream::RayAudioStream)::Cvoid\n\nPause audio stream\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.PauseMusicStream-Tuple{Raylib.RayMusic}","page":"Home","title":"Raylib.PauseMusicStream","text":"PauseMusicStream(music::RayMusic)\nlibraylib.PauseMusicStream(music::RayMusic)::Cvoid\n\nPause music playing\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.PauseSound-Tuple{Raylib.RaySound}","page":"Home","title":"Raylib.PauseSound","text":"PauseSound(sound::RaySound)\nlibraylib.PauseSound(sound::RaySound)::Cvoid\n\nPause a sound\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.PlayAudioStream-Tuple{Raylib.RayAudioStream}","page":"Home","title":"Raylib.PlayAudioStream","text":"PlayAudioStream(stream::RayAudioStream)\nlibraylib.PlayAudioStream(stream::RayAudioStream)::Cvoid\n\nPlay audio stream\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.PlayMusicStream-Tuple{Raylib.RayMusic}","page":"Home","title":"Raylib.PlayMusicStream","text":"PlayMusicStream(music::RayMusic)\nlibraylib.PlayMusicStream(music::RayMusic)::Cvoid\n\nStart music playing\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.PlaySound-Tuple{Raylib.RaySound}","page":"Home","title":"Raylib.PlaySound","text":"PlaySound(sound::RaySound)\nlibraylib.PlaySound(sound::RaySound)::Cvoid\n\nPlay a sound\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.PlaySoundMulti-Tuple{Raylib.RaySound}","page":"Home","title":"Raylib.PlaySoundMulti","text":"PlaySoundMulti(sound::RaySound)\nlibraylib.PlaySoundMulti(sound::RaySound)::Cvoid\n\nPlay a sound (using multichannel buffer pool)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.RestoreWindow-Tuple{}","page":"Home","title":"Raylib.RestoreWindow","text":"RestoreWindow()\nlibraylib.RestoreWindow()::Cvoid\n\nSet window state: not minimized/maximized (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ResumeAudioStream-Tuple{Raylib.RayAudioStream}","page":"Home","title":"Raylib.ResumeAudioStream","text":"ResumeAudioStream(stream::RayAudioStream)\nlibraylib.ResumeAudioStream(stream::RayAudioStream)::Cvoid\n\nResume audio stream\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ResumeMusicStream-Tuple{Raylib.RayMusic}","page":"Home","title":"Raylib.ResumeMusicStream","text":"ResumeMusicStream(music::RayMusic)\nlibraylib.ResumeMusicStream(music::RayMusic)::Cvoid\n\nResume playing paused music\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ResumeSound-Tuple{Raylib.RaySound}","page":"Home","title":"Raylib.ResumeSound","text":"ResumeSound(sound::RaySound)\nlibraylib.ResumeSound(sound::RaySound)::Cvoid\n\nResume a paused sound\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SaveFileData-Tuple{String, Ref{Nothing}, Integer}","page":"Home","title":"Raylib.SaveFileData","text":"SaveFileData(fileName::String, data::Ref{Nothing}, bytesToWrite::Integer)::Bool\nlibraylib.SaveFileData(fileName::Cstring, data::Ref{Cvoid}, bytesToWrite::Cuint)::Cuchar\n\nSave data to file from byte array (write), returns true on success\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SaveFileText-Tuple{String, String}","page":"Home","title":"Raylib.SaveFileText","text":"SaveFileText(fileName::String, text::String)::Bool\nlibraylib.SaveFileText(fileName::Cstring, text::Cstring)::Cuchar\n\nSave text data to file (write), string must be '\\0' terminated, returns true on success\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SaveStorageValue-Tuple{Integer, Integer}","page":"Home","title":"Raylib.SaveStorageValue","text":"SaveStorageValue(position::Integer, value::Integer)::Bool\nlibraylib.SaveStorageValue(position::Cuint, value::Cint)::Cuchar\n\nSave integer value to storage file (to defined position), returns true on success\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SeekMusicStream-Tuple{Raylib.RayMusic, Real}","page":"Home","title":"Raylib.SeekMusicStream","text":"SeekMusicStream(music::RayMusic, position::Real)\nlibraylib.SeekMusicStream(music::RayMusic, position::Cfloat)::Cvoid\n\nSeek music to a position (in seconds)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetAudioStreamBufferSizeDefault-Tuple{Integer}","page":"Home","title":"Raylib.SetAudioStreamBufferSizeDefault","text":"SetAudioStreamBufferSizeDefault(size::Integer)\nlibraylib.SetAudioStreamBufferSizeDefault(size::Cint)::Cvoid\n\nDefault size for new audio streams\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetAudioStreamPitch-Tuple{Raylib.RayAudioStream, Real}","page":"Home","title":"Raylib.SetAudioStreamPitch","text":"SetAudioStreamPitch(stream::RayAudioStream, pitch::Real)\nlibraylib.SetAudioStreamPitch(stream::RayAudioStream, pitch::Cfloat)::Cvoid\n\nSet pitch for audio stream (1.0 is base level)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetAudioStreamVolume-Tuple{Raylib.RayAudioStream, Real}","page":"Home","title":"Raylib.SetAudioStreamVolume","text":"SetAudioStreamVolume(stream::RayAudioStream, volume::Real)\nlibraylib.SetAudioStreamVolume(stream::RayAudioStream, volume::Cfloat)::Cvoid\n\nSet volume for audio stream (1.0 is max level)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetCameraAltControl-Tuple{Integer}","page":"Home","title":"Raylib.SetCameraAltControl","text":"SetCameraAltControl(keyAlt::Integer)\nlibraylib.SetCameraAltControl(keyAlt::Cint)::Cvoid\n\nSet camera alt key to combine with mouse movement (free camera)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetCameraMode-Tuple{Raylib.RayCamera3D, Integer}","page":"Home","title":"Raylib.SetCameraMode","text":"SetCameraMode(camera::RayCamera3D, mode::Integer)\nlibraylib.SetCameraMode(camera::RayCamera3D, mode::Cint)::Cvoid\n\nSet camera mode (multiple camera modes available)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetCameraMoveControls-NTuple{6, Integer}","page":"Home","title":"Raylib.SetCameraMoveControls","text":"SetCameraMoveControls(keyFront::Integer, keyBack::Integer, keyRight::Integer, keyLeft::Integer, keyUp::Integer, keyDown::Integer)\nlibraylib.SetCameraMoveControls(keyFront::Cint, keyBack::Cint, keyRight::Cint, keyLeft::Cint, keyUp::Cint, keyDown::Cint)::Cvoid\n\nSet camera move controls (1st person and 3rd person cameras)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetCameraPanControl-Tuple{Integer}","page":"Home","title":"Raylib.SetCameraPanControl","text":"SetCameraPanControl(keyPan::Integer)\nlibraylib.SetCameraPanControl(keyPan::Cint)::Cvoid\n\nSet camera pan key to combine with mouse movement (free camera)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetCameraSmoothZoomControl-Tuple{Integer}","page":"Home","title":"Raylib.SetCameraSmoothZoomControl","text":"SetCameraSmoothZoomControl(keySmoothZoom::Integer)\nlibraylib.SetCameraSmoothZoomControl(keySmoothZoom::Cint)::Cvoid\n\nSet camera smooth zoom key to combine with mouse (free camera)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetClipboardText-Tuple{String}","page":"Home","title":"Raylib.SetClipboardText","text":"SetClipboardText(text::String)\nlibraylib.SetClipboardText(text::Cstring)::Cvoid\n\nSet clipboard text content\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetConfigFlags-Tuple{Integer}","page":"Home","title":"Raylib.SetConfigFlags","text":"SetConfigFlags(flags::Integer)\nlibraylib.SetConfigFlags(flags::Cuint)::Cvoid\n\nSetup init configuration flags (view FLAGS)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetExitKey-Tuple{Integer}","page":"Home","title":"Raylib.SetExitKey","text":"SetExitKey(key::Integer)\nlibraylib.SetExitKey(key::Cint)::Cvoid\n\nSet a custom key to exit program (default is ESC)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetGamepadMappings-Tuple{String}","page":"Home","title":"Raylib.SetGamepadMappings","text":"SetGamepadMappings(mappings::String)\nlibraylib.SetGamepadMappings(mappings::Cstring)::Cint\n\nSet internal gamepad mappings (SDL_GameControllerDB)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetGesturesEnabled-Tuple{Integer}","page":"Home","title":"Raylib.SetGesturesEnabled","text":"SetGesturesEnabled(flags::Integer)\nlibraylib.SetGesturesEnabled(flags::Cuint)::Cvoid\n\nEnable a set of gestures using flags\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetMasterVolume-Tuple{Real}","page":"Home","title":"Raylib.SetMasterVolume","text":"SetMasterVolume(volume::Real)\nlibraylib.SetMasterVolume(volume::Cfloat)::Cvoid\n\nSet master volume (listener)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetMaterialTexture-Tuple{Ref{Raylib.RayMaterial}, Integer, Raylib.RayTexture}","page":"Home","title":"Raylib.SetMaterialTexture","text":"SetMaterialTexture(material::Ref{RayMaterial}, mapType::Integer, texture::RayTexture)\nlibraylib.SetMaterialTexture(material::Ref{RayMaterial}, mapType::Cint, texture::RayTexture)::Cvoid\n\nSet texture for a material map type (MATERIALMAPDIFFUSE, MATERIALMAPSPECULAR...)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetModelMeshMaterial-Tuple{Ref{Raylib.RayModel}, Integer, Integer}","page":"Home","title":"Raylib.SetModelMeshMaterial","text":"SetModelMeshMaterial(model::Ref{RayModel}, meshId::Integer, materialId::Integer)\nlibraylib.SetModelMeshMaterial(model::Ref{RayModel}, meshId::Cint, materialId::Cint)::Cvoid\n\nSet material for a mesh\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetMouseCursor-Tuple{Integer}","page":"Home","title":"Raylib.SetMouseCursor","text":"SetMouseCursor(cursor::Integer)\nlibraylib.SetMouseCursor(cursor::Cint)::Cvoid\n\nSet mouse cursor\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetMouseOffset-Tuple{Integer, Integer}","page":"Home","title":"Raylib.SetMouseOffset","text":"SetMouseOffset(offsetX::Integer, offsetY::Integer)\nlibraylib.SetMouseOffset(offsetX::Cint, offsetY::Cint)::Cvoid\n\nSet mouse offset\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetMousePosition-Tuple{Integer, Integer}","page":"Home","title":"Raylib.SetMousePosition","text":"SetMousePosition(x::Integer, y::Integer)\nlibraylib.SetMousePosition(x::Cint, y::Cint)::Cvoid\n\nSet mouse position XY\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetMouseScale-Tuple{Real, Real}","page":"Home","title":"Raylib.SetMouseScale","text":"SetMouseScale(scaleX::Real, scaleY::Real)\nlibraylib.SetMouseScale(scaleX::Cfloat, scaleY::Cfloat)::Cvoid\n\nSet mouse scaling\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetMusicPitch-Tuple{Raylib.RayMusic, Real}","page":"Home","title":"Raylib.SetMusicPitch","text":"SetMusicPitch(music::RayMusic, pitch::Real)\nlibraylib.SetMusicPitch(music::RayMusic, pitch::Cfloat)::Cvoid\n\nSet pitch for a music (1.0 is base level)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetMusicVolume-Tuple{Raylib.RayMusic, Real}","page":"Home","title":"Raylib.SetMusicVolume","text":"SetMusicVolume(music::RayMusic, volume::Real)\nlibraylib.SetMusicVolume(music::RayMusic, volume::Cfloat)::Cvoid\n\nSet volume for music (1.0 is max level)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetPixelColor-Tuple{Ref{Nothing}, ColorTypes.RGBA{FixedPointNumbers.N0f8}, Integer}","page":"Home","title":"Raylib.SetPixelColor","text":"SetPixelColor(dstPtr::Ref{Nothing}, color::RayColor, format::Integer)\nlibraylib.SetPixelColor(dstPtr::Ref{Cvoid}, color::RayColor, format::Cint)::Cvoid\n\nSet color formatted into destination pixel pointer\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetRandomSeed-Tuple{Integer}","page":"Home","title":"Raylib.SetRandomSeed","text":"SetRandomSeed(seed::Integer)\nlibraylib.SetRandomSeed(seed::Cuint)::Cvoid\n\nSet the seed for the random number generator\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetShaderValue-Tuple{Raylib.RayShader, Integer, Ref{Nothing}, Integer}","page":"Home","title":"Raylib.SetShaderValue","text":"SetShaderValue(shader::RayShader, locIndex::Integer, value::Ref{Nothing}, uniformType::Integer)\nlibraylib.SetShaderValue(shader::RayShader, locIndex::Cint, value::Ref{Cvoid}, uniformType::Cint)::Cvoid\n\nSet shader uniform value\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetShaderValueMatrix-Tuple{Raylib.RayShader, Integer, NTuple{16, Float32}}","page":"Home","title":"Raylib.SetShaderValueMatrix","text":"SetShaderValueMatrix(shader::RayShader, locIndex::Integer, mat::RayMatrix)\nlibraylib.SetShaderValueMatrix(shader::RayShader, locIndex::Cint, mat::NTuple{16, Cfloat})::Cvoid\n\nSet shader uniform value (matrix 4x4)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetShaderValueTexture-Tuple{Raylib.RayShader, Integer, Raylib.RayTexture}","page":"Home","title":"Raylib.SetShaderValueTexture","text":"SetShaderValueTexture(shader::RayShader, locIndex::Integer, texture::RayTexture)\nlibraylib.SetShaderValueTexture(shader::RayShader, locIndex::Cint, texture::RayTexture)::Cvoid\n\nSet shader uniform value for texture (sampler2d)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetShaderValueV-Tuple{Raylib.RayShader, Integer, Ref{Nothing}, Integer, Integer}","page":"Home","title":"Raylib.SetShaderValueV","text":"SetShaderValueV(shader::RayShader, locIndex::Integer, value::Ref{Nothing}, uniformType::Integer, count::Integer)\nlibraylib.SetShaderValueV(shader::RayShader, locIndex::Cint, value::Ref{Cvoid}, uniformType::Cint, count::Cint)::Cvoid\n\nSet shader uniform value vector\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetShapesTexture-Tuple{Raylib.RayTexture, Raylib.RayRectangle}","page":"Home","title":"Raylib.SetShapesTexture","text":"SetShapesTexture(texture::RayTexture, source::RayRectangle)\nlibraylib.SetShapesTexture(texture::RayTexture, source::RayRectangle)::Cvoid\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetSoundPitch-Tuple{Raylib.RaySound, Real}","page":"Home","title":"Raylib.SetSoundPitch","text":"SetSoundPitch(sound::RaySound, pitch::Real)\nlibraylib.SetSoundPitch(sound::RaySound, pitch::Cfloat)::Cvoid\n\nSet pitch for a sound (1.0 is base level)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetSoundVolume-Tuple{Raylib.RaySound, Real}","page":"Home","title":"Raylib.SetSoundVolume","text":"SetSoundVolume(sound::RaySound, volume::Real)\nlibraylib.SetSoundVolume(sound::RaySound, volume::Cfloat)::Cvoid\n\nSet volume for a sound (1.0 is max level)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetTargetFPS-Tuple{Integer}","page":"Home","title":"Raylib.SetTargetFPS","text":"SetTargetFPS(fps::Integer)\nlibraylib.SetTargetFPS(fps::Cint)::Cvoid\n\nSet target FPS (maximum)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetTextureFilter-Tuple{Raylib.RayTexture, Integer}","page":"Home","title":"Raylib.SetTextureFilter","text":"SetTextureFilter(texture::RayTexture, filter::Integer)\nlibraylib.SetTextureFilter(texture::RayTexture, filter::Cint)::Cvoid\n\nSet texture scaling filter mode\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetTextureWrap-Tuple{Raylib.RayTexture, Integer}","page":"Home","title":"Raylib.SetTextureWrap","text":"SetTextureWrap(texture::RayTexture, wrap::Integer)\nlibraylib.SetTextureWrap(texture::RayTexture, wrap::Cint)::Cvoid\n\nSet texture wrapping mode\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetTraceLogLevel-Tuple{Integer}","page":"Home","title":"Raylib.SetTraceLogLevel","text":"SetTraceLogLevel(logLevel::Integer)\nlibraylib.SetTraceLogLevel(logLevel::Cint)::Cvoid\n\nSet the current threshold (minimum) log level\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetWindowIcon-Tuple{Raylib.RayImage}","page":"Home","title":"Raylib.SetWindowIcon","text":"SetWindowIcon(image::RayImage)\nlibraylib.SetWindowIcon(image::RayImage)::Cvoid\n\nSet icon for window (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetWindowMinSize-Tuple{Integer, Integer}","page":"Home","title":"Raylib.SetWindowMinSize","text":"SetWindowMinSize(width::Integer, height::Integer)\nlibraylib.SetWindowMinSize(width::Cint, height::Cint)::Cvoid\n\nSet window minimum dimensions (for FLAGWINDOWRESIZABLE)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetWindowMonitor-Tuple{Integer}","page":"Home","title":"Raylib.SetWindowMonitor","text":"SetWindowMonitor(monitor::Integer)\nlibraylib.SetWindowMonitor(monitor::Cint)::Cvoid\n\nSet monitor for the current window (fullscreen mode)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetWindowPosition-Tuple{Integer, Integer}","page":"Home","title":"Raylib.SetWindowPosition","text":"SetWindowPosition(x::Integer, y::Integer)\nlibraylib.SetWindowPosition(x::Cint, y::Cint)::Cvoid\n\nSet window position on screen (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetWindowSize-Tuple{Integer, Integer}","page":"Home","title":"Raylib.SetWindowSize","text":"SetWindowSize(width::Integer, height::Integer)\nlibraylib.SetWindowSize(width::Cint, height::Cint)::Cvoid\n\nSet window dimensions\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetWindowState-Tuple{Integer}","page":"Home","title":"Raylib.SetWindowState","text":"SetWindowState(flags::Integer)\nlibraylib.SetWindowState(flags::Cuint)::Cvoid\n\nSet window configuration state using flags\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.SetWindowTitle-Tuple{String}","page":"Home","title":"Raylib.SetWindowTitle","text":"SetWindowTitle(title::String)\nlibraylib.SetWindowTitle(title::Cstring)::Cvoid\n\nSet title for window (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ShowCursor-Tuple{}","page":"Home","title":"Raylib.ShowCursor","text":"ShowCursor()\nlibraylib.ShowCursor()::Cvoid\n\nShows cursor\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.StopAudioStream-Tuple{Raylib.RayAudioStream}","page":"Home","title":"Raylib.StopAudioStream","text":"StopAudioStream(stream::RayAudioStream)\nlibraylib.StopAudioStream(stream::RayAudioStream)::Cvoid\n\nStop audio stream\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.StopMusicStream-Tuple{Raylib.RayMusic}","page":"Home","title":"Raylib.StopMusicStream","text":"StopMusicStream(music::RayMusic)\nlibraylib.StopMusicStream(music::RayMusic)::Cvoid\n\nStop music playing\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.StopSound-Tuple{Raylib.RaySound}","page":"Home","title":"Raylib.StopSound","text":"StopSound(sound::RaySound)\nlibraylib.StopSound(sound::RaySound)::Cvoid\n\nStop playing a sound\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.StopSoundMulti-Tuple{}","page":"Home","title":"Raylib.StopSoundMulti","text":"StopSoundMulti()\nlibraylib.StopSoundMulti()::Cvoid\n\nStop any sound playing (using multichannel buffer pool)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TakeScreenshot-Tuple{String}","page":"Home","title":"Raylib.TakeScreenshot","text":"TakeScreenshot(fileName::String)\nlibraylib.TakeScreenshot(fileName::Cstring)::Cvoid\n\nTakes a screenshot of current screen (filename extension defines format)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextAppend-Tuple{String, String, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.TextAppend","text":"TextAppend(text::String, append::String, position::Ref{<:Integer})\nlibraylib.TextAppend(text::Cstring, append::Cstring, position::Ref{Cint})::Cvoid\n\nAppend text at specific position and move cursor!\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextCodepointsToUTF8-Tuple{Ref{var\"#s356\"} where var\"#s356\"<:Integer, Integer}","page":"Home","title":"Raylib.TextCodepointsToUTF8","text":"TextCodepointsToUTF8(codepoints::Ref{<:Integer}, length::Integer)::String\nlibraylib.TextCodepointsToUTF8(codepoints::Ref{Cint}, length::Cint)::Cstring\n\nEncode text as codepoints array into UTF-8 text string (WARNING: memory must be freed!)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextCopy-Tuple{String, String}","page":"Home","title":"Raylib.TextCopy","text":"TextCopy(dst::String, src::String)\nlibraylib.TextCopy(dst::Cstring, src::Cstring)::Cint\n\nCopy one string to another, returns bytes copied\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextFindIndex-Tuple{String, String}","page":"Home","title":"Raylib.TextFindIndex","text":"TextFindIndex(text::String, find::String)\nlibraylib.TextFindIndex(text::Cstring, find::Cstring)::Cint\n\nFind first text occurrence within a string\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextInsert-Tuple{String, String, Integer}","page":"Home","title":"Raylib.TextInsert","text":"TextInsert(text::String, insert::String, position::Integer)::String\nlibraylib.TextInsert(text::Cstring, insert::Cstring, position::Cint)::Cstring\n\nInsert text in a position (memory must be freed!)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextIsEqual-Tuple{String, String}","page":"Home","title":"Raylib.TextIsEqual","text":"TextIsEqual(text1::String, text2::String)::Bool\nlibraylib.TextIsEqual(text1::Cstring, text2::Cstring)::Cuchar\n\nCheck if two text string are equal\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextJoin-Tuple{Ref{Cstring}, Integer, String}","page":"Home","title":"Raylib.TextJoin","text":"TextJoin(textList::Ref{Cstring}, count::Integer, delimiter::String)::String\nlibraylib.TextJoin(textList::Ptr{Cstring}, count::Cint, delimiter::Cstring)::Cstring\n\nJoin text strings with delimiter\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextLength-Tuple{String}","page":"Home","title":"Raylib.TextLength","text":"TextLength(text::String)\nlibraylib.TextLength(text::Cstring)::Cuint\n\nGet text length, checks for '\\0' ending\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextReplace-Tuple{String, String, String}","page":"Home","title":"Raylib.TextReplace","text":"TextReplace(text::String, replace::String, by::String)::String\nlibraylib.TextReplace(text::Cstring, replace::Cstring, by::Cstring)::Cstring\n\nReplace text string (memory must be freed!)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextSplit-Tuple{String, Char, Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.TextSplit","text":"TextSplit(text::String, delimiter::Char, count::Ref{<:Integer})::Ref{Cstring}\nlibraylib.TextSplit(text::Cstring, delimiter::Cchar, count::Ref{Cint})::Ptr{Cstring}\n\nSplit text into multiple strings\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextSubtext-Tuple{String, Integer, Integer}","page":"Home","title":"Raylib.TextSubtext","text":"TextSubtext(text::String, position::Integer, length::Integer)::String\nlibraylib.TextSubtext(text::Cstring, position::Cint, length::Cint)::Cstring\n\nGet a piece of a text string\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextToInteger-Tuple{String}","page":"Home","title":"Raylib.TextToInteger","text":"TextToInteger(text::String)\nlibraylib.TextToInteger(text::Cstring)::Cint\n\nGet integer value from text (negative values not supported)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextToLower-Tuple{String}","page":"Home","title":"Raylib.TextToLower","text":"TextToLower(text::String)::String\nlibraylib.TextToLower(text::Cstring)::Cstring\n\nGet lower case version of provided string\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextToPascal-Tuple{String}","page":"Home","title":"Raylib.TextToPascal","text":"TextToPascal(text::String)::String\nlibraylib.TextToPascal(text::Cstring)::Cstring\n\nGet Pascal case notation version of provided string\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.TextToUpper-Tuple{String}","page":"Home","title":"Raylib.TextToUpper","text":"TextToUpper(text::String)::String\nlibraylib.TextToUpper(text::Cstring)::Cstring\n\nGet upper case version of provided string\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.ToggleFullscreen-Tuple{}","page":"Home","title":"Raylib.ToggleFullscreen","text":"ToggleFullscreen()\nlibraylib.ToggleFullscreen()::Cvoid\n\nToggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadCodepoints-Tuple{Ref{var\"#s356\"} where var\"#s356\"<:Integer}","page":"Home","title":"Raylib.UnloadCodepoints","text":"UnloadCodepoints(codepoints::Ref{<:Integer})\nlibraylib.UnloadCodepoints(codepoints::Ref{Cint})::Cvoid\n\nUnload codepoints data from memory\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadFileData-Tuple{Ref{UInt8}}","page":"Home","title":"Raylib.UnloadFileData","text":"UnloadFileData(data::Ref{UInt8})\nlibraylib.UnloadFileData(data::Ref{Cuchar})::Cvoid\n\nUnload file data allocated by LoadFileData()\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadFileText-Tuple{String}","page":"Home","title":"Raylib.UnloadFileText","text":"UnloadFileText(text::String)\nlibraylib.UnloadFileText(text::Cstring)::Cvoid\n\nUnload file text data allocated by LoadFileText()\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadFont-Tuple{Raylib.RayFont}","page":"Home","title":"Raylib.UnloadFont","text":"UnloadFont(font::RayFont)\nlibraylib.UnloadFont(font::RayFont)::Cvoid\n\nUnload Font from GPU memory (VRAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadFontData-Tuple{Ref{Raylib.RayGlyphInfo}, Integer}","page":"Home","title":"Raylib.UnloadFontData","text":"UnloadFontData(chars::Ref{RayGlyphInfo}, glyphCount::Integer)\nlibraylib.UnloadFontData(chars::Ref{RayGlyphInfo}, glyphCount::Cint)::Cvoid\n\nUnload font chars info data (RAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadImage-Tuple{Raylib.RayImage}","page":"Home","title":"Raylib.UnloadImage","text":"UnloadImage(image::RayImage)\nlibraylib.UnloadImage(image::RayImage)::Cvoid\n\nUnload image from CPU memory (RAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadImageColors-Tuple{Ref{ColorTypes.RGBA{FixedPointNumbers.N0f8}}}","page":"Home","title":"Raylib.UnloadImageColors","text":"UnloadImageColors(colors::Ref{RayColor})\nlibraylib.UnloadImageColors(colors::Ref{RayColor})::Cvoid\n\nUnload color data loaded with LoadImageColors()\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadImagePalette-Tuple{Ref{ColorTypes.RGBA{FixedPointNumbers.N0f8}}}","page":"Home","title":"Raylib.UnloadImagePalette","text":"UnloadImagePalette(colors::Ref{RayColor})\nlibraylib.UnloadImagePalette(colors::Ref{RayColor})::Cvoid\n\nUnload colors palette loaded with LoadImagePalette()\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadMaterial-Tuple{Raylib.RayMaterial}","page":"Home","title":"Raylib.UnloadMaterial","text":"UnloadMaterial(material::RayMaterial)\nlibraylib.UnloadMaterial(material::RayMaterial)::Cvoid\n\nUnload material from GPU memory (VRAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadMesh-Tuple{Raylib.RayMesh}","page":"Home","title":"Raylib.UnloadMesh","text":"UnloadMesh(mesh::RayMesh)\nlibraylib.UnloadMesh(mesh::RayMesh)::Cvoid\n\nUnload mesh data from CPU and GPU\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadModel-Tuple{Raylib.RayModel}","page":"Home","title":"Raylib.UnloadModel","text":"UnloadModel(model::RayModel)\nlibraylib.UnloadModel(model::RayModel)::Cvoid\n\nUnload model (including meshes) from memory (RAM and/or VRAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadModelAnimation-Tuple{Raylib.RayModelAnimation}","page":"Home","title":"Raylib.UnloadModelAnimation","text":"UnloadModelAnimation(anim::RayModelAnimation)\nlibraylib.UnloadModelAnimation(anim::RayModelAnimation)::Cvoid\n\nUnload animation data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadModelAnimations-Tuple{Ref{Raylib.RayModelAnimation}, Integer}","page":"Home","title":"Raylib.UnloadModelAnimations","text":"UnloadModelAnimations(animations::Ref{RayModelAnimation}, count::Integer)\nlibraylib.UnloadModelAnimations(animations::Ref{RayModelAnimation}, count::Cuint)::Cvoid\n\nUnload animation array data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadModelKeepMeshes-Tuple{Raylib.RayModel}","page":"Home","title":"Raylib.UnloadModelKeepMeshes","text":"UnloadModelKeepMeshes(model::RayModel)\nlibraylib.UnloadModelKeepMeshes(model::RayModel)::Cvoid\n\nUnload model (but not meshes) from memory (RAM and/or VRAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadMusicStream-Tuple{Raylib.RayMusic}","page":"Home","title":"Raylib.UnloadMusicStream","text":"UnloadMusicStream(music::RayMusic)\nlibraylib.UnloadMusicStream(music::RayMusic)::Cvoid\n\nUnload music stream\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadRenderTexture-Tuple{Raylib.RayRenderTexture}","page":"Home","title":"Raylib.UnloadRenderTexture","text":"UnloadRenderTexture(target::RayRenderTexture)\nlibraylib.UnloadRenderTexture(target::RayRenderTexture)::Cvoid\n\nUnload render texture from GPU memory (VRAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadShader-Tuple{Raylib.RayShader}","page":"Home","title":"Raylib.UnloadShader","text":"UnloadShader(shader::RayShader)\nlibraylib.UnloadShader(shader::RayShader)::Cvoid\n\nUnload shader from GPU memory (VRAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadSound-Tuple{Raylib.RaySound}","page":"Home","title":"Raylib.UnloadSound","text":"UnloadSound(sound::RaySound)\nlibraylib.UnloadSound(sound::RaySound)::Cvoid\n\nUnload sound\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadTexture-Tuple{Raylib.RayTexture}","page":"Home","title":"Raylib.UnloadTexture","text":"UnloadTexture(texture::RayTexture)\nlibraylib.UnloadTexture(texture::RayTexture)::Cvoid\n\nUnload texture from GPU memory (VRAM)\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadVrStereoConfig-Tuple{Raylib.RayVrStereoConfig}","page":"Home","title":"Raylib.UnloadVrStereoConfig","text":"UnloadVrStereoConfig(config::RayVrStereoConfig)\nlibraylib.UnloadVrStereoConfig(config::RayVrStereoConfig)::Cvoid\n\nUnload VR stereo config\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadWave-Tuple{Raylib.RayWave}","page":"Home","title":"Raylib.UnloadWave","text":"UnloadWave(wave::RayWave)\nlibraylib.UnloadWave(wave::RayWave)::Cvoid\n\nUnload wave data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UnloadWaveSamples-Tuple{Ref{var\"#s356\"} where var\"#s356\"<:Real}","page":"Home","title":"Raylib.UnloadWaveSamples","text":"UnloadWaveSamples(samples::Ref{<:Real})\nlibraylib.UnloadWaveSamples(samples::Ref{Cfloat})::Cvoid\n\nUnload samples data loaded with LoadWaveSamples()\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UpdateAudioStream-Tuple{Raylib.RayAudioStream, Ref{Nothing}, Integer}","page":"Home","title":"Raylib.UpdateAudioStream","text":"UpdateAudioStream(stream::RayAudioStream, data::Ref{Nothing}, samplesCount::Integer)\nlibraylib.UpdateAudioStream(stream::RayAudioStream, data::Ref{Cvoid}, samplesCount::Cint)::Cvoid\n\nUpdate audio stream buffers with data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UpdateCamera-Tuple{Raylib.RayCamera3D}","page":"Home","title":"Raylib.UpdateCamera","text":"UpdateCamera(camera::RayCamera3D)\n\nReturn new camera with updated parameter.\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UpdateCamera-Tuple{Ref{Raylib.RayCamera3D}}","page":"Home","title":"Raylib.UpdateCamera","text":"UpdateCamera(camera::Ref{RayCamera3D})\nlibraylib.UpdateCamera(camera::Ref{RayCamera3D})::Cvoid\n\nUpdate camera position for selected mode\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UpdateMeshBuffer-Tuple{Raylib.RayMesh, Integer, Ref{Nothing}, Integer, Integer}","page":"Home","title":"Raylib.UpdateMeshBuffer","text":"UpdateMeshBuffer(mesh::RayMesh, index::Integer, data::Ref{Nothing}, dataSize::Integer, offset::Integer)\nlibraylib.UpdateMeshBuffer(mesh::RayMesh, index::Cint, data::Ref{Cvoid}, dataSize::Cint, offset::Cint)::Cvoid\n\nUpdate mesh vertex data in GPU for a specific buffer index\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UpdateModelAnimation-Tuple{Raylib.RayModel, Raylib.RayModelAnimation, Integer}","page":"Home","title":"Raylib.UpdateModelAnimation","text":"UpdateModelAnimation(model::RayModel, anim::RayModelAnimation, frame::Integer)\nlibraylib.UpdateModelAnimation(model::RayModel, anim::RayModelAnimation, frame::Cint)::Cvoid\n\nUpdate model animation pose\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UpdateMusicStream-Tuple{Raylib.RayMusic}","page":"Home","title":"Raylib.UpdateMusicStream","text":"UpdateMusicStream(music::RayMusic)\nlibraylib.UpdateMusicStream(music::RayMusic)::Cvoid\n\nUpdates buffers for music streaming\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UpdateSound-Tuple{Raylib.RaySound, Ref{Nothing}, Integer}","page":"Home","title":"Raylib.UpdateSound","text":"UpdateSound(sound::RaySound, data::Ref{Nothing}, samplesCount::Integer)\nlibraylib.UpdateSound(sound::RaySound, data::Ref{Cvoid}, samplesCount::Cint)::Cvoid\n\nUpdate sound buffer with new data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UpdateTexture-Tuple{Raylib.RayTexture, Ref{Nothing}}","page":"Home","title":"Raylib.UpdateTexture","text":"UpdateTexture(texture::RayTexture, pixels::Ref{Nothing})\nlibraylib.UpdateTexture(texture::RayTexture, pixels::Ref{Cvoid})::Cvoid\n\nUpdate GPU texture with new data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UpdateTextureRec-Tuple{Raylib.RayTexture, Raylib.RayRectangle, Ref{Nothing}}","page":"Home","title":"Raylib.UpdateTextureRec","text":"UpdateTextureRec(texture::RayTexture, rec::RayRectangle, pixels::Ref{Nothing})\nlibraylib.UpdateTextureRec(texture::RayTexture, rec::RayRectangle, pixels::Ref{Cvoid})::Cvoid\n\nUpdate GPU texture rectangle with new data\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.UploadMesh-Tuple{Ref{Raylib.RayMesh}, Bool}","page":"Home","title":"Raylib.UploadMesh","text":"UploadMesh(mesh::Ref{RayMesh}, dynamic::Bool)\nlibraylib.UploadMesh(mesh::Ref{RayMesh}, dynamic::Cuchar)::Cvoid\n\nUpload mesh vertex data in GPU and provide VAO/VBO ids\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.WaveCopy-Tuple{Raylib.RayWave}","page":"Home","title":"Raylib.WaveCopy","text":"WaveCopy(wave::RayWave)::RayWave\nlibraylib.WaveCopy(wave::RayWave)::RayWave\n\nCopy a wave to a new wave\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.WaveCrop-Tuple{Ref{Raylib.RayWave}, Integer, Integer}","page":"Home","title":"Raylib.WaveCrop","text":"WaveCrop(wave::Ref{RayWave}, initSample::Integer, finalSample::Integer)\nlibraylib.WaveCrop(wave::Ref{RayWave}, initSample::Cint, finalSample::Cint)::Cvoid\n\nCrop a wave to defined samples range\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.WaveFormat-Tuple{Ref{Raylib.RayWave}, Integer, Integer, Integer}","page":"Home","title":"Raylib.WaveFormat","text":"WaveFormat(wave::Ref{RayWave}, sampleRate::Integer, sampleSize::Integer, channels::Integer)\nlibraylib.WaveFormat(wave::Ref{RayWave}, sampleRate::Cint, sampleSize::Cint, channels::Cint)::Cvoid\n\nConvert wave data to desired format\n\n\n\n\n\n","category":"method"},{"location":"#Raylib.WindowShouldClose-Tuple{}","page":"Home","title":"Raylib.WindowShouldClose","text":"WindowShouldClose()::Bool\nlibraylib.WindowShouldClose()::Cuchar\n\nCheck if KEY_ESCAPE pressed or Close icon pressed\n\n\n\n\n\n","category":"method"}]
}
